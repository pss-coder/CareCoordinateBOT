"use strict";var r4b=require("@bonfhir/core/r4b"),react=require("react"),reactQuery=require("@tanstack/react-query"),jsxRuntime=require("react/jsx-runtime");const FhirQueryKeys={read:(clientKey,type,id,options)=>[clientKey,r4b.resourceTypeOf(type),id,"read",type,options],vread:(clientKey,type,id,vid,options)=>[clientKey,r4b.resourceTypeOf(type),id,"vread",vid,type,options],history:(clientKey,type,id,pageUrl,options)=>{if(!type&&!id){return[clientKey,"history",options]}if(!id){return[clientKey,r4b.resourceTypeOf(type),"history",type,pageUrl,options]}return[clientKey,r4b.resourceTypeOf(type),id,"history",type,pageUrl,options]},search:(clientKey,type,parameters,pageUrl,options)=>[clientKey,r4b.resourceTypeOf(type),"search",type,parameters,pageUrl,options],infiniteSearch:(clientKey,type,parameters,options)=>[clientKey,r4b.resourceTypeOf(type),"infiniteSearch",type,parameters,options],capabilities:(clientKey,mode)=>[clientKey,"capabilities",mode],execute:(clientKey,operation)=>[clientKey,operation.resourceType,operation.resourceId,"execute",operation.operation,operation.parameters],clientFn:(clientKey,fn,params)=>[clientKey,"client",fn,...params],invalidateQueries:(clientKey,queryClient,type,id)=>{if(!type&&!id){queryClient.invalidateQueries({queryKey:[clientKey]});return}queryClient.invalidateQueries({queryKey:[clientKey,type,id]});queryClient.invalidateQueries({queryKey:[clientKey,type,"search"]});queryClient.invalidateQueries({queryKey:[clientKey,type,"infiniteSearch"]});queryClient.invalidateQueries({queryKey:[clientKey,"history"]});queryClient.invalidateQueries({queryKey:[clientKey,type,"history"]});queryClient.invalidateQueries({queryKey:[clientKey,type,id,"history"]});queryClient.invalidateQueries({queryKey:[clientKey,type,id,"execute"]});queryClient.invalidateQueries({queryKey:[clientKey,type,undefined,"execute"]});queryClient.invalidateQueries({queryKey:[clientKey,"client"]})}};const DEFAULT_FHIR_CLIENT="default";const FhirQueryContext=react.createContext(undefined);function useFhirQueryContext(){const context=react.useContext(FhirQueryContext);if(!context){throw new Error("Missing FhirQueryContext. Did you forget to use a parent FhirQueryProvider?")}return context}function useFhirClientQueryContext(client){const context=useFhirQueryContext();const clientKey=client??DEFAULT_FHIR_CLIENT;const fhirClient=context.fhirClient[clientKey];if(!fhirClient){throw new Error(`Unable to find a FhirClient with name ${clientKey}. Did you forget to configure it in a parent FhirQueryProvider?`)}return{...context,fhirClient:fhirClient,clientKey:clientKey}}function useFhirBatchMutation(options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);return reactQuery.useMutation({...options?.mutation,onSuccess:(data,variables,context)=>{for(const resource of data.futureRequests.map((x=>x.resource))){if(resource.resourceType&&resource.id){FhirQueryKeys.invalidateQueries(fhirQueryContext.clientKey,fhirQueryContext.queryClient,resource.resourceType,resource.id)}}options?.mutation?.onSuccess?.(data,variables,context)},mutationFn:async args=>{const executor=fhirQueryContext.fhirClient.batch();args(executor);await executor.send();for(const x of executor.futureRequests)x.resource;return executor}})}function useFhirCapabilities(mode,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);return reactQuery.useQuery({...options?.query,queryKey:FhirQueryKeys.capabilities(fhirQueryContext.clientKey,mode),queryFn:()=>fhirQueryContext.fhirClient.capabilities(mode)})}function useFhirClient(fn,params,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);return reactQuery.useQuery({...options?.query,queryKey:FhirQueryKeys.clientFn(fhirQueryContext.clientKey,fn.toString(),params||[]),queryFn:async()=>await fn(fhirQueryContext.fhirClient)})}function useFhirClientMutation(options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);return reactQuery.useMutation({...options?.mutation,onSuccess:(data,variables,context)=>{if(fhirQueryContext.manageCache&&!options?.doNotInvalidateAllQueries){FhirQueryKeys.invalidateQueries(fhirQueryContext.clientKey,fhirQueryContext.queryClient,undefined,undefined)}options?.mutation?.onSuccess?.(data,variables,context)},mutationFn:async args=>await args(fhirQueryContext.fhirClient)})}function useFhirCreateMutation(type,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);return reactQuery.useMutation({...options?.mutation,onSuccess:(data,variables,context)=>{if(fhirQueryContext.manageCache){FhirQueryKeys.invalidateQueries(fhirQueryContext.clientKey,fhirQueryContext.queryClient,data.resourceType,data.id);fhirQueryContext.queryClient.setQueryData(FhirQueryKeys.read(fhirQueryContext.clientKey,data.resourceType,data.id),data)}options?.mutation?.onSuccess?.(data,variables,context)},mutationFn:args=>r4b.isResource(type,args)?fhirQueryContext.fhirClient.create(args):fhirQueryContext.fhirClient.create(args.body,args.options)})}function useFhirCreateOrMutation(_type,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);return reactQuery.useMutation({...options?.mutation,onSuccess:([resource,isChanged],variables,context)=>{if(isChanged&&fhirQueryContext.manageCache){FhirQueryKeys.invalidateQueries(fhirQueryContext.clientKey,fhirQueryContext.queryClient,resource.resourceType,resource.id);fhirQueryContext.queryClient.setQueryData(FhirQueryKeys.read(fhirQueryContext.clientKey,resource.resourceType,resource.id),resource)}options?.mutation?.onSuccess?.([resource,isChanged],variables,context)},mutationFn:args=>fhirQueryContext.fhirClient.createOr(args.action,args.body,args.search)})}function useFhirDeleteMutation(options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);return reactQuery.useMutation({...options?.mutation,onSuccess:(data,variables,context)=>{if(fhirQueryContext.manageCache){FhirQueryKeys.invalidateQueries(fhirQueryContext.clientKey,fhirQueryContext.queryClient,variables.resourceType,variables.id)}options?.mutation?.onSuccess?.(data,variables,context)},mutationFn:args=>fhirQueryContext.fhirClient.delete(args.resourceType,args.id,args.options)})}function useFhirExecute(operation,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);if(operation.affectsState??true){throw new Error(`useFhirExecute hook does not support operations that affect state (${operation.operation}). Use useFhirExecuteMutation instead.`)}return reactQuery.useQuery({...options?.query,queryKey:FhirQueryKeys.execute(fhirQueryContext.clientKey,operation),queryFn:()=>fhirQueryContext.fhirClient.execute(operation)})}function useFhirExecuteMutation(options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);return reactQuery.useMutation({...options?.mutation,onSuccess:(data,operation,context)=>{if(fhirQueryContext.manageCache&&operation.resourceType&&operation.resourceId){FhirQueryKeys.invalidateQueries(fhirQueryContext.clientKey,fhirQueryContext.queryClient,operation.resourceType,operation.resourceId)}options?.mutation?.onSuccess?.(data,operation,context)},mutationFn:args=>fhirQueryContext.fhirClient.execute(args)})}function useFhirGraph(graph,resourceType,resourceId,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);return reactQuery.useQuery({...options?.query,queryKey:FhirQueryKeys.execute(fhirQueryContext.clientKey,{operation:"$graph",resourceType:r4b.resourceTypeOf(resourceType),resourceId:resourceId,affectsState:false}),queryFn:()=>fhirQueryContext.fhirClient.graph(graph,resourceType,resourceId)})}function useFhirGraphQL(query,variables,operationName,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);if(typeof operationName!=="string"){options=operationName}return reactQuery.useQuery({...options?.query,queryKey:FhirQueryKeys.execute(fhirQueryContext.clientKey,{operation:"$graphql",parameters:{query:query,variables:variables}}),queryFn:()=>fhirQueryContext.fhirClient.graphql(query,variables,typeof operationName==="string"?operationName:undefined)})}function useFhirGraphQLMutation(query,operationName,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);if(typeof operationName!=="string"){options=operationName}return reactQuery.useMutation({...options?.mutation,onSuccess:(data,variables,context)=>{if(fhirQueryContext.manageCache){FhirQueryKeys.invalidateQueries(fhirQueryContext.clientKey,fhirQueryContext.queryClient,undefined,undefined)}options?.mutation?.onSuccess?.(data,variables,context)},mutationFn:variables=>fhirQueryContext.fhirClient.graphql(query,variables,typeof operationName==="string"?operationName:undefined)})}function useFhirGraphQLResult(query,variables,operationName,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);if(typeof operationName!=="string"){options=operationName}return reactQuery.useQuery({...options?.query,queryKey:FhirQueryKeys.execute(fhirQueryContext.clientKey,{operation:"$graphql",parameters:{query:query,variables:variables}}),queryFn:()=>fhirQueryContext.fhirClient.graphqlResult(query,variables,typeof operationName==="string"?operationName:undefined)})}function useFhirHistory(type,id,options){if(type&&typeof type!=="string"){return useFhirHistory(type.resourceType,type.id,id)}const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);return reactQuery.useQuery({...options?.query,queryKey:FhirQueryKeys.history(fhirQueryContext.clientKey,type,id,options?.pageUrl,options?.fhir),queryFn:({signal:signal})=>options?.pageUrl?fhirQueryContext.fhirClient.fetchPage(options?.pageUrl,{signal:signal},typeof type==="string"?undefined:type||undefined):fhirQueryContext.fhirClient.history(type,id,{...options?.fhir,signal:signal})})}function useFhirInfiniteSearch(type,parameters,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);const normalizedParameters=r4b.normalizeSearchParameters(type,parameters);return reactQuery.useInfiniteQuery({...options?.query,initialPageParam:"",queryKey:FhirQueryKeys.infiniteSearch(fhirQueryContext.clientKey,type,normalizedParameters,options?.fhir),queryFn:({pageParam:pageParam,signal:signal})=>pageParam?fhirQueryContext.fhirClient.fetchPage(pageParam,{signal:signal},typeof type==="string"?undefined:type||undefined):fhirQueryContext.fhirClient.search(type,parameters,{...options?.fhir,signal:signal}),keepPreviousData:true,getNextPageParam:lastPage=>lastPage.linkUrl("next")})}function useFhirPatchMutation(type,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);const mutatorManageCache=options?.manageCache===undefined||options?.manageCache;return reactQuery.useMutation({...options?.mutation,onSuccess:(data,variables,context)=>{if(mutatorManageCache&&fhirQueryContext.manageCache){FhirQueryKeys.invalidateQueries(fhirQueryContext.clientKey,fhirQueryContext.queryClient,data.resourceType,data.id);fhirQueryContext.queryClient.setQueryData(FhirQueryKeys.read(fhirQueryContext.clientKey,data.resourceType,data.id),data)}options?.mutation?.onSuccess?.(data,variables,context)},mutationFn:args=>fhirQueryContext.fhirClient.patch(type,args.id,args.body,args.options)})}function useFhirRead(type,id,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);return reactQuery.useQuery({...options?.query,enabled:Boolean(id)&&(options?.query?.enabled==undefined||options?.query?.enabled),queryKey:FhirQueryKeys.read(fhirQueryContext.clientKey,type,r4b.id(id)||"",options?.fhir),queryFn:({signal:signal})=>fhirQueryContext.fhirClient.read(type,r4b.id(id)||"",{...options?.fhir,signal:signal??undefined})})}function useFhirSaveMutation(type,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);return reactQuery.useMutation({...options?.mutation,onSuccess:(data,variables,context)=>{if(fhirQueryContext.manageCache){FhirQueryKeys.invalidateQueries(fhirQueryContext.clientKey,fhirQueryContext.queryClient,data.resourceType,data.id);fhirQueryContext.queryClient.setQueryData(FhirQueryKeys.read(fhirQueryContext.clientKey,data.resourceType,data.id),data)}options?.mutation?.onSuccess?.(data,variables,context)},mutationFn:args=>r4b.isResource(type,args)?fhirQueryContext.fhirClient.save(args):fhirQueryContext.fhirClient.save(args.body,args.options)})}function useFhirSearch(type,parameters,pageUrl,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);const normalizedParameters=r4b.normalizeSearchParameters(type,parameters);return reactQuery.useQuery({...options?.query,queryKey:FhirQueryKeys.search(fhirQueryContext.clientKey,type,normalizedParameters,pageUrl,options?.fhir),queryFn:({signal:signal})=>pageUrl?fhirQueryContext.fhirClient.fetchPage(pageUrl,{signal:signal},typeof type==="string"?undefined:type||undefined):fhirQueryContext.fhirClient.search(type,parameters,{...options?.fhir,signal:signal}),keepPreviousData:true})}function useFhirSearchAllPages(type,parameters,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);const normalizedParameters=r4b.normalizeSearchParameters(type,parameters);return reactQuery.useQuery({...options?.query,queryKey:FhirQueryKeys.search(fhirQueryContext.clientKey,type,normalizedParameters),queryFn:({signal:signal})=>fhirQueryContext.fhirClient.searchAllPages(type,parameters,{signal:signal})})}function useFhirSearchOne(type,parameters,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);const normalizedParameters=r4b.normalizeSearchParameters(type,parameters);return reactQuery.useQuery({...options?.query,queryKey:FhirQueryKeys.search(fhirQueryContext.clientKey,type,normalizedParameters,undefined,options?.fhir),queryFn:({signal:signal})=>fhirQueryContext.fhirClient.searchOne(type,parameters,{...options?.fhir,signal:signal})})}function useFhirTransactionMutation(options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);return reactQuery.useMutation({...options?.mutation,onSuccess:(data,variables,context)=>{if(fhirQueryContext.manageCache){for(const resource of data.futureRequests.map((x=>x.resource))){if(resource.resourceType&&resource.id){FhirQueryKeys.invalidateQueries(fhirQueryContext.clientKey,fhirQueryContext.queryClient,resource.resourceType,resource.id)}}}options?.mutation?.onSuccess?.(data,variables,context)},mutationFn:async args=>{const executor=fhirQueryContext.fhirClient.transaction();args(executor);await executor.send();for(const x of executor.futureRequests)x.resource;return executor}})}function useFhirUpdateMutation(type,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);return reactQuery.useMutation({...options?.mutation,onSuccess:(data,variables,context)=>{if(fhirQueryContext.manageCache){FhirQueryKeys.invalidateQueries(fhirQueryContext.clientKey,fhirQueryContext.queryClient,data.resourceType,data.id);fhirQueryContext.queryClient.setQueryData(FhirQueryKeys.read(fhirQueryContext.clientKey,data.resourceType,data.id),data)}options?.mutation?.onSuccess?.(data,variables,context)},mutationFn:args=>r4b.isResource(type,args)?fhirQueryContext.fhirClient.update(args):fhirQueryContext.fhirClient.update(args.body,args.options)})}function useFhirVRead(type,id,vid,options){const fhirQueryContext=useFhirClientQueryContext(options?.fhirClient);return reactQuery.useQuery({...options?.query,enabled:Boolean(id)&&Boolean(vid)&&(options?.query?.enabled==undefined||options?.query?.enabled),queryKey:FhirQueryKeys.vread(fhirQueryContext.clientKey,type,r4b.id(id)||"",vid||"",options?.fhir),queryFn:({signal:signal})=>fhirQueryContext.fhirClient.vread(type,r4b.id(id)||"",vid||"",{...options?.fhir,signal:signal})})}function FhirQueryProvider(props){const fhirClient=normalizeFhirClient(props.fhirClient);const manageCache=props.manageCache==undefined||props.manageCache;if(hasQueryClient(props)){return jsxRuntime.jsx(FhirQueryContext.Provider,{value:{fhirClient:fhirClient,queryClient:props.queryClient,manageCache:manageCache},children:props.children})}const queryClient=react.useMemo((()=>new reactQuery.QueryClient(hasQueryClientConfig(props)?props.queryClientConfig:undefined)),[]);return jsxRuntime.jsx(reactQuery.QueryClientProvider,{client:queryClient,children:jsxRuntime.jsx(FhirQueryContext.Provider,{value:{fhirClient:fhirClient,queryClient:queryClient,manageCache:manageCache},children:props.children})})}function hasQueryClient(value){return!!value.queryClient}function hasQueryClientConfig(value){return!!value.queryClientConfig}function normalizeFhirClient(fhirClient){if(isFhirClientMap(fhirClient)){const result=Object.fromEntries(Object.entries(fhirClient).map((([key,value])=>[key??DEFAULT_FHIR_CLIENT,typeof value==="string"?new r4b.FetchFhirClient({baseUrl:value}):value])).map((([key,value])=>[key,value])));if(!result[DEFAULT_FHIR_CLIENT]){throw new Error(`Missing a default FhirClient. You must provide a default FhirClient in the fhirClient prop using either an empty string or the "${DEFAULT_FHIR_CLIENT}" key.`)}return result}return{[DEFAULT_FHIR_CLIENT]:typeof fhirClient==="string"?new r4b.FetchFhirClient({baseUrl:fhirClient}):fhirClient}}function isFhirClientMap(fhirClient){if(typeof fhirClient==="string"){return false}if(fhirClient["fetch"]){return false}return true}exports.DEFAULT_FHIR_CLIENT=DEFAULT_FHIR_CLIENT;exports.FhirQueryContext=FhirQueryContext;exports.FhirQueryKeys=FhirQueryKeys;exports.FhirQueryProvider=FhirQueryProvider;exports.useFhirBatchMutation=useFhirBatchMutation;exports.useFhirCapabilities=useFhirCapabilities;exports.useFhirClient=useFhirClient;exports.useFhirClientMutation=useFhirClientMutation;exports.useFhirClientQueryContext=useFhirClientQueryContext;exports.useFhirCreateMutation=useFhirCreateMutation;exports.useFhirCreateOrMutation=useFhirCreateOrMutation;exports.useFhirDeleteMutation=useFhirDeleteMutation;exports.useFhirExecute=useFhirExecute;exports.useFhirExecuteMutation=useFhirExecuteMutation;exports.useFhirGraph=useFhirGraph;exports.useFhirGraphQL=useFhirGraphQL;exports.useFhirGraphQLMutation=useFhirGraphQLMutation;exports.useFhirGraphQLResult=useFhirGraphQLResult;exports.useFhirHistory=useFhirHistory;exports.useFhirInfiniteSearch=useFhirInfiniteSearch;exports.useFhirPatchMutation=useFhirPatchMutation;exports.useFhirQueryContext=useFhirQueryContext;exports.useFhirRead=useFhirRead;exports.useFhirSaveMutation=useFhirSaveMutation;exports.useFhirSearch=useFhirSearch;exports.useFhirSearchAllPages=useFhirSearchAllPages;exports.useFhirSearchOne=useFhirSearchOne;exports.useFhirTransactionMutation=useFhirTransactionMutation;exports.useFhirUpdateMutation=useFhirUpdateMutation;exports.useFhirVRead=useFhirVRead;//# sourceMappingURL=index.cjs.map
