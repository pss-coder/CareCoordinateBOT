{"version":3,"file":"index.cjs","sources":["../../../src/r4b/cache-keys.ts","../../../src/r4b/context.tsx","../../../src/r4b/hooks/use-fhir-batch-mutation.tsx","../../../src/r4b/hooks/use-fhir-capabilities.tsx","../../../src/r4b/hooks/use-fhir-client.tsx","../../../src/r4b/hooks/use-fhir-client-mutation.tsx","../../../src/r4b/hooks/use-fhir-create-mutation.tsx","../../../src/r4b/hooks/use-fhir-create-or-mutation.tsx","../../../src/r4b/hooks/use-fhir-delete-mutation.tsx","../../../src/r4b/hooks/use-fhir-execute.tsx","../../../src/r4b/hooks/use-fhir-execute-mutation.tsx","../../../src/r4b/hooks/use-fhir-graph.tsx","../../../src/r4b/hooks/use-fhir-graphql.tsx","../../../src/r4b/hooks/use-fhir-graphql-mutation.tsx","../../../src/r4b/hooks/use-fhir-graphql-result.tsx","../../../src/r4b/hooks/use-fhir-history.tsx","../../../src/r4b/hooks/use-fhir-infinite-search.tsx","../../../src/r4b/hooks/use-fhir-patch-mutation.tsx","../../../src/r4b/hooks/use-fhir-read.tsx","../../../src/r4b/hooks/use-fhir-save-mutation.tsx","../../../src/r4b/hooks/use-fhir-search.tsx","../../../src/r4b/hooks/use-fhir-search-all-pages.tsx","../../../src/r4b/hooks/use-fhir-search-one.tsx","../../../src/r4b/hooks/use-fhir-transaction-mutation.tsx","../../../src/r4b/hooks/use-fhir-update-mutation.tsx","../../../src/r4b/hooks/use-fhir-vread.tsx","../../../src/r4b/provider.tsx"],"sourcesContent":["import {\n  AnyResourceType,\n  AnyResourceTypeOrCustomResource,\n  FhirClient,\n  GeneralParameters,\n  Operation,\n  resourceTypeOf,\n} from \"@bonfhir/core/r4b\";\nimport { QueryClient } from \"@tanstack/react-query\";\n\n/**\n * Manages [Query keys](https://tanstack.com/query/latest/docs/react/guides/query-keys) and\n * cache optimizations / invalidations.\n */\nexport const FhirQueryKeys = {\n  /**\n   * Get the query keys for a read request\n   */\n  read: (\n    clientKey: string,\n    type: AnyResourceTypeOrCustomResource,\n    id: string,\n    options?: GeneralParameters | null | undefined,\n  ) => [clientKey, resourceTypeOf(type), id, \"read\", type, options] as const,\n\n  /**\n   * Get the query keys for a vread request\n   */\n  vread: (\n    clientKey: string,\n    type: AnyResourceTypeOrCustomResource,\n    id: string,\n    vid: string,\n    options?: Parameters<FhirClient[\"vread\"]>[3] | null | undefined,\n  ) =>\n    [clientKey, resourceTypeOf(type), id, \"vread\", vid, type, options] as const,\n\n  /**\n   * Get the query keys for a history request\n   */\n  history: (\n    clientKey: string,\n    type: AnyResourceTypeOrCustomResource | null | undefined,\n    id: string | null | undefined,\n    pageUrl?: string | null | undefined,\n    options?: Parameters<FhirClient[\"history\"]>[2] | null | undefined,\n  ) => {\n    if (!type && !id) {\n      return [clientKey, \"history\", options] as const;\n    }\n    if (!id) {\n      return [\n        clientKey,\n        resourceTypeOf(type),\n        \"history\",\n        type,\n        pageUrl,\n        options,\n      ] as const;\n    }\n    return [\n      clientKey,\n      resourceTypeOf(type),\n      id,\n      \"history\",\n      type,\n      pageUrl,\n      options,\n    ] as const;\n  },\n\n  /**\n   * Get the query keys for a search request\n   */\n  search: (\n    clientKey: string,\n    type: AnyResourceTypeOrCustomResource,\n    parameters?: string | null | undefined,\n    pageUrl?: string | null | undefined,\n    options?: Parameters<FhirClient[\"search\"]>[2] | null | undefined,\n  ) =>\n    [\n      clientKey,\n      resourceTypeOf(type),\n      \"search\",\n      type,\n      parameters,\n      pageUrl,\n      options,\n    ] as const,\n\n  /**\n   * Get the query keys for a infinite search request\n   */\n  infiniteSearch: (\n    clientKey: string,\n    type: AnyResourceTypeOrCustomResource,\n    parameters?: string | null | undefined,\n    options?: Parameters<FhirClient[\"search\"]>[2] | null | undefined,\n  ) =>\n    [\n      clientKey,\n      resourceTypeOf(type),\n      \"infiniteSearch\",\n      type,\n      parameters,\n      options,\n    ] as const,\n\n  /**\n   * Get the query keys for a capabilities request\n   */\n  capabilities: (clientKey: string, mode: string | null | undefined) =>\n    [clientKey, \"capabilities\", mode] as const,\n\n  /**\n   * Get the query keys for an execute request\n   */\n  execute: (\n    clientKey: string,\n    operation: Operation | Record<string, unknown>,\n  ) =>\n    [\n      clientKey,\n      operation.resourceType,\n      operation.resourceId,\n      \"execute\",\n      operation.operation,\n      operation.parameters,\n    ] as const,\n\n  clientFn: (clientKey: string, fn: string, params: unknown[]) =>\n    [clientKey, \"client\", fn, ...params] as const,\n\n  /**\n   * Invalidate all queries that might be impacted by a change on a resource.\n   */\n  invalidateQueries: (\n    clientKey: string,\n    queryClient: QueryClient,\n    type: AnyResourceType | undefined,\n    id: string | undefined,\n  ) => {\n    if (!type && !id) {\n      queryClient.invalidateQueries({ queryKey: [clientKey] });\n      return;\n    }\n\n    queryClient.invalidateQueries({ queryKey: [clientKey, type, id] });\n    queryClient.invalidateQueries({ queryKey: [clientKey, type, \"search\"] });\n    queryClient.invalidateQueries({\n      queryKey: [clientKey, type, \"infiniteSearch\"],\n    });\n    queryClient.invalidateQueries({ queryKey: [clientKey, \"history\"] });\n    queryClient.invalidateQueries({ queryKey: [clientKey, type, \"history\"] });\n    queryClient.invalidateQueries({\n      queryKey: [clientKey, type, id, \"history\"],\n    });\n    queryClient.invalidateQueries({\n      queryKey: [clientKey, type, id, \"execute\"],\n    });\n    queryClient.invalidateQueries({\n      queryKey: [clientKey, type, undefined, \"execute\"],\n    });\n    queryClient.invalidateQueries({ queryKey: [clientKey, \"client\"] });\n  },\n};\n","import { FhirClient } from \"@bonfhir/core/r4b\";\nimport { QueryClient } from \"@tanstack/react-query\";\nimport { createContext, useContext } from \"react\";\n\n/**\n * The name for the default {@link FhirClient}.\n */\nexport const DEFAULT_FHIR_CLIENT = \"default\";\n\nexport interface FhirQueryContext {\n  /**\n   * The {@link FhirClient} to make FHIR HTTP requests.\n   */\n  fhirClient: Record<string | typeof DEFAULT_FHIR_CLIENT, FhirClient>;\n\n  /**\n   * The {@link QueryClient} used to manage the state.\n   */\n  queryClient: QueryClient;\n\n  /**\n   * `true` when the cache invalidation / optimizations are managed by the default hooks.\n   */\n  manageCache: boolean;\n}\n\n/**\n * The context used by fhir-query.\n */\nexport const FhirQueryContext = createContext<FhirQueryContext | undefined>(\n  undefined,\n);\n\n/**\n * Get the current {@link FhirQueryContext}.\n *\n * @throws Error if no parent context exists (a.k.a. no `FhirQueryProvider` was used in the parent tree).\n */\nexport function useFhirQueryContext(): FhirQueryContext {\n  const context = useContext(FhirQueryContext);\n  if (!context) {\n    throw new Error(\n      \"Missing FhirQueryContext. Did you forget to use a parent FhirQueryProvider?\",\n    );\n  }\n\n  return context;\n}\n\n/**\n * Get the current {@link FhirQueryContext} with a specific fhirClient.\n *\n * @throws Error if no parent context exists (a.k.a. no `FhirQueryProvider` was used in the parent tree).\n */\nexport function useFhirClientQueryContext(\n  client: string | null | undefined,\n): Omit<FhirQueryContext, \"fhirClient\"> & {\n  fhirClient: FhirClient;\n  clientKey: string;\n} {\n  const context = useFhirQueryContext();\n  const clientKey = client ?? DEFAULT_FHIR_CLIENT;\n\n  const fhirClient = context.fhirClient[clientKey];\n  if (!fhirClient) {\n    throw new Error(\n      `Unable to find a FhirClient with name ${clientKey}. Did you forget to configure it in a parent FhirQueryProvider?`,\n    );\n  }\n\n  return {\n    ...context,\n    fhirClient,\n    clientKey,\n  };\n}\n","import { BundleExecutor, Resource, Retrieved } from \"@bonfhir/core/r4b\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport type UseFhirBatchMutationArgs = (executor: BundleExecutor) => unknown;\n\nexport interface UseFhirBatchMutationOptions {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          BundleExecutor,\n          unknown,\n          UseFhirBatchMutationArgs,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * The batch interaction submits a set of actions to perform on a server in a single HTTP request/response.\n * Each entry executes in a different transaction on the server.\n *\n * @see https://hl7.org/fhir/http.html#transaction\n */\nexport function useFhirBatchMutation(\n  options?: UseFhirBatchMutationOptions | null | undefined,\n): UseMutationResult<\n  BundleExecutor,\n  unknown,\n  UseFhirBatchMutationArgs,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      for (const resource of data.futureRequests.map((x) => x.resource)) {\n        if (\n          (resource as Resource).resourceType &&\n          (resource as Retrieved<Resource>).id\n        ) {\n          FhirQueryKeys.invalidateQueries(\n            fhirQueryContext.clientKey,\n            fhirQueryContext.queryClient,\n            (resource as Resource).resourceType,\n            (resource as Retrieved<Resource>).id,\n          );\n        }\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: async (args) => {\n      const executor = fhirQueryContext.fhirClient.batch();\n      args(executor);\n      await executor.send();\n      // We touch all resources to ensure there are no errors at this stage\n      for (const x of executor.futureRequests) x.resource;\n      return executor;\n    },\n  });\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  CapabilityStatement,\n  TerminologyCapabilities,\n} from \"@bonfhir/core/r4b\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirCapabilitiesOptions<\n  TResourceType extends CapabilityStatement | TerminologyCapabilities,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          TResourceType,\n          unknown,\n          TResourceType,\n          ReturnType<(typeof FhirQueryKeys)[\"capabilities\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * The capabilities interaction retrieves the information about a server's capabilities - which portions of this specification it supports.\n *\n * https://hl7.org/fhir/http.html#capabilities\n */\nexport function useFhirCapabilities(\n  mode?: \"full\" | \"normative\" | null | undefined,\n  options?: UseFhirCapabilitiesOptions<CapabilityStatement> | null | undefined,\n): UseQueryResult<CapabilityStatement>;\nexport function useFhirCapabilities(\n  mode: \"terminology\",\n  options?:\n    | UseFhirCapabilitiesOptions<TerminologyCapabilities>\n    | null\n    | undefined,\n): UseQueryResult<TerminologyCapabilities>;\nexport function useFhirCapabilities(\n  mode?: \"full\" | \"normative\" | \"terminology\" | null | undefined,\n  options?: UseFhirCapabilitiesOptions<any> | null | undefined,\n): UseQueryResult<CapabilityStatement | TerminologyCapabilities> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useQuery({\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.capabilities(fhirQueryContext.clientKey, mode),\n    queryFn: () => fhirQueryContext.fhirClient.capabilities(mode as any),\n  });\n}\n","import { FhirClient } from \"@bonfhir/core/r4b\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirClientOptions<TResult> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          TResult,\n          unknown,\n          TResult,\n          ReturnType<(typeof FhirQueryKeys)[\"clientFn\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) using a FhirClient directly.\n */\nexport function useFhirClient<TResult>(\n  fn: (client: FhirClient) => Promise<TResult>,\n  params?: unknown[],\n  options?: UseFhirClientOptions<TResult> | null | undefined,\n): UseQueryResult<TResult> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useQuery<TResult>({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.clientFn(\n      fhirQueryContext.clientKey,\n      fn.toString(),\n      params || [],\n    ),\n    queryFn: async () => await fn(fhirQueryContext.fhirClient),\n  });\n}\n","import { FhirClient } from \"@bonfhir/core/r4b\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport type UseFhirClientMutationArgs<TResult> = (\n  client: FhirClient,\n) => Promise<TResult>;\n\nexport interface UseFhirClientMutationOptions<TResult> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          TResult,\n          unknown,\n          UseFhirClientMutationArgs<TResult>,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n  /**\n   * Whether to invalidate all queries that use the same FhirClient.\n   * IF true, you should probably think about doing manual invalidation in the `onSuccess` callback.\n   */\n  doNotInvalidateAllQueries?: boolean;\n}\n\n/**\n * This hook allows you to perform one or several operations using a FhirClient directly.\n *\n * Invoking it will invalidate all queries that use the same FhirClient if `manageCache` is true (the default).\n */\nexport function useFhirClientMutation<TResult = unknown>(\n  options?: UseFhirClientMutationOptions<TResult> | null | undefined,\n): UseMutationResult<\n  TResult,\n  unknown,\n  UseFhirClientMutationArgs<TResult>,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (fhirQueryContext.manageCache && !options?.doNotInvalidateAllQueries) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          undefined,\n          undefined,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: async (args) => {\n      return await args(fhirQueryContext.fhirClient);\n    },\n  });\n}\n","import {\n  AnyResourceType,\n  ConditionalSearchParameters,\n  ExtractResource,\n  GeneralParameters,\n  Retrieved,\n  isResource,\n} from \"@bonfhir/core/r4b\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport type UseFhirCreateMutationArgs<TResourceType extends AnyResourceType> =\n  | {\n      body: ExtractResource<TResourceType>;\n      options?:\n        | (GeneralParameters & ConditionalSearchParameters<TResourceType>)\n        | null\n        | undefined;\n    }\n  | ExtractResource<TResourceType>;\n\nexport interface UseFhirCreateMutationOptions<\n  TResourceType extends AnyResourceType,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          Retrieved<ExtractResource<TResourceType>>,\n          unknown,\n          UseFhirCreateMutationArgs<TResourceType>,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for a create request.\n *\n * @see https://hl7.org/fhir/http.html#create\n */\nexport function useFhirCreateMutation<TResourceType extends AnyResourceType>(\n  type: TResourceType,\n  options?: UseFhirCreateMutationOptions<TResourceType> | null | undefined,\n): UseMutationResult<\n  Retrieved<ExtractResource<TResourceType>>,\n  unknown,\n  UseFhirCreateMutationArgs<TResourceType>,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (fhirQueryContext.manageCache) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          data.resourceType,\n          data.id,\n        );\n        fhirQueryContext.queryClient.setQueryData(\n          FhirQueryKeys.read(\n            fhirQueryContext.clientKey,\n            data.resourceType,\n            data.id,\n          ),\n          data,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: (args) =>\n      isResource(type, args)\n        ? fhirQueryContext.fhirClient.create(args)\n        : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fhirQueryContext.fhirClient.create(args.body, args.options as any),\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  CreateOrAction,\n  FhirClientSearchParameters,\n  MergeResult,\n  ResourceOf,\n  Retrieved,\n} from \"@bonfhir/core/r4b\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport type UseFhirCreateOrMutationArgs<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> = {\n  action: CreateOrAction;\n  body: ResourceOf<TResourceType>;\n  search?:\n    | FhirClientSearchParameters<ResourceOf<TResourceType>[\"resourceType\"]>\n    | null\n    | undefined;\n};\n\nexport interface UseFhirCreateOrMutationOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          MergeResult<Retrieved<ResourceOf<TResourceType>>>,\n          unknown,\n          UseFhirCreateOrMutationArgs<TResourceType>,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\nexport function useFhirCreateOrMutation<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  _type: TResourceType,\n  options?: UseFhirCreateOrMutationOptions<TResourceType> | null | undefined,\n): UseMutationResult<\n  MergeResult<Retrieved<ResourceOf<TResourceType>>>,\n  unknown,\n  UseFhirCreateOrMutationArgs<TResourceType>,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: ([resource, isChanged], variables, context) => {\n      if (isChanged && fhirQueryContext.manageCache) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          resource.resourceType,\n          resource.id,\n        );\n        fhirQueryContext.queryClient.setQueryData(\n          FhirQueryKeys.read(\n            fhirQueryContext.clientKey,\n            resource.resourceType,\n            resource.id,\n          ),\n          resource,\n        );\n      }\n      options?.mutation?.onSuccess?.([resource, isChanged], variables, context);\n    },\n    mutationFn: (args) =>\n      fhirQueryContext.fhirClient.createOr(\n        args.action,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        args.body as any,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        args.search as any,\n      ),\n  });\n}\n","import { AnyResourceType, GeneralParameters } from \"@bonfhir/core/r4b\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirDeleteMutationArgs {\n  resourceType: AnyResourceType;\n  id: string;\n  options?: GeneralParameters | null | undefined;\n}\n\nexport interface UseFhirDeleteMutationOptions {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<void, unknown, UseFhirDeleteMutationArgs, unknown>,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for a delete request.\n *\n * @see https://hl7.org/fhir/http.html#delete\n */\nexport function useFhirDeleteMutation(\n  options?: UseFhirDeleteMutationOptions | null | undefined,\n): UseMutationResult<void, unknown, UseFhirDeleteMutationArgs, unknown> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (fhirQueryContext.manageCache) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          variables.resourceType,\n          variables.id,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: (args) => {\n      return fhirQueryContext.fhirClient.delete(\n        args.resourceType,\n        args.id,\n        args.options,\n      );\n    },\n  });\n}\n","import { Operation } from \"@bonfhir/core/r4b\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirExecuteOptions<TOperationResult> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          TOperationResult,\n          unknown,\n          TOperationResult,\n          ReturnType<(typeof FhirQueryKeys)[\"execute\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for an operation request.\n * If  you want to execute an operation that affects state, you should use the {@link useFhirExecuteMutation} hook instead.\n *\n * @see https://hl7.org/fhir/operations.html\n * @see https://www.hl7.org/fhir/operationslist.html\n */\nexport function useFhirExecute<TOperationResult>(\n  operation: Operation,\n  options?: UseFhirExecuteOptions<Operation> | null | undefined,\n): UseQueryResult<TOperationResult> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  if (operation.affectsState ?? true) {\n    throw new Error(\n      `useFhirExecute hook does not support operations that affect state (${operation.operation}). Use useFhirExecuteMutation instead.`,\n    );\n  }\n\n  return useQuery({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.execute(fhirQueryContext.clientKey, operation),\n    queryFn: () => fhirQueryContext.fhirClient.execute(operation),\n  });\n}\n","import { AnyResourceType, Operation } from \"@bonfhir/core/r4b\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirExecuteMutationOptions<TOperationResult> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<TOperationResult, unknown, Operation, unknown>,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for an operation request.\n *\n * This version is to be used when the operation affects state, or you want to avoid query caching.\n * If that's not the case, consider using the {@link useFhirExecute} hook instead.\n *\n * @see https://hl7.org/fhir/operations.html\n * @see https://www.hl7.org/fhir/operationslist.html\n */\nexport function useFhirExecuteMutation<TOperationResult>(\n  options?: UseFhirExecuteMutationOptions<TOperationResult> | null | undefined,\n): UseMutationResult<TOperationResult, unknown, Operation, unknown> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, operation, context) => {\n      if (\n        fhirQueryContext.manageCache &&\n        operation.resourceType &&\n        operation.resourceId\n      ) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          operation.resourceType as AnyResourceType,\n          operation.resourceId,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, operation, context);\n    },\n    mutationFn: (args) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      fhirQueryContext.fhirClient.execute(args as any),\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  BundleNavigator,\n  ResourceOf,\n  Retrieved,\n  resourceTypeOf,\n} from \"@bonfhir/core/r4b\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirGraphOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          unknown,\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          ReturnType<(typeof FhirQueryKeys)[\"execute\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Execute a [$graph operation](http://hl7.org/fhir/R4B/resource-operation-graph.html) to retrieve an entire graph\n * of resources.\n *\n * @see http://hl7.org/fhir/R4B/resource-operation-graph.html\n */\nexport function useFhirGraph<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  graph: string,\n  resourceType?: TResourceType | null | undefined,\n  resourceId?: string | null | undefined,\n  options?: UseFhirGraphOptions<TResourceType> | null | undefined,\n): UseQueryResult<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useQuery({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.execute(fhirQueryContext.clientKey, {\n      operation: \"$graph\",\n      resourceType: resourceTypeOf(resourceType),\n      resourceId,\n      affectsState: false,\n    }),\n    queryFn: () =>\n      fhirQueryContext.fhirClient.graph(graph, resourceType, resourceId),\n  });\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirGraphQLOptions<TResult = any> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          TResult,\n          unknown,\n          TResult,\n          ReturnType<(typeof FhirQueryKeys)[\"execute\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Execute a [$graphql operation](https://hl7.org/fhir/resource-operation-graphql.html).\n *\n * This hook puts the query on error if there are GraphQL errors in the response.\n * This make it easier to reason about, but do not support partial errors in GraphQL.\n *\n * Use the `useFhirGraphqlResult` hook to have access to the raw GraphQL response,\n * including the `errors` and `extensions` field.\n */\nexport function useFhirGraphQL<TResult = any>(\n  query: string,\n  variables?: Record<string, any>,\n  operationName?: string | null | undefined,\n  options?: UseFhirGraphQLOptions<TResult> | null | undefined,\n): UseQueryResult<TResult>;\nexport function useFhirGraphQL<TResult = any, TVariables = Record<string, any>>(\n  query: TypedDocumentNode<TResult, TVariables>,\n  variables?: TVariables,\n  options?: UseFhirGraphQLOptions<TResult> | null | undefined,\n): UseQueryResult<TResult>;\nexport function useFhirGraphQL<TResult = any, TVariables = Record<string, any>>(\n  query: string | TypedDocumentNode<TResult, TVariables>,\n  variables?: TVariables,\n  operationName?: string | UseFhirGraphQLOptions<TResult> | null | undefined,\n  options?: UseFhirGraphQLOptions<TResult> | null | undefined,\n): UseQueryResult<TResult> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  if (typeof operationName !== \"string\") {\n    options = operationName;\n  }\n\n  return useQuery<TResult>({\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.execute(fhirQueryContext.clientKey, {\n      operation: \"$graphql\",\n      parameters: {\n        query,\n        variables,\n      },\n    }),\n    queryFn: () =>\n      fhirQueryContext.fhirClient.graphql(\n        query as any,\n        variables as any,\n        typeof operationName === \"string\" ? (operationName as any) : undefined,\n      ),\n  });\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirGraphQLMutationOptions<\n  TResult = any,\n  TVariables = Record<string, any>,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<TResult, unknown, TVariables, unknown>,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Execute a [$graphql mutation](https://hl7.org/fhir/resource-operation-graphql.html).\n *\n * The mutation is put on error if there are GraphQL errors in the response.\n */\nexport function useFhirGraphQLMutation<TResult = any>(\n  query: string,\n  operationName?: string | null | undefined,\n  options?: UseFhirGraphQLMutationOptions<TResult> | null | undefined,\n): UseMutationResult<TResult, unknown, Record<string, any>, unknown>;\nexport function useFhirGraphQLMutation<\n  TResult = any,\n  TVariables = Record<string, any>,\n>(\n  query: TypedDocumentNode<TResult, TVariables>,\n  options?: UseFhirGraphQLMutationOptions<TResult> | null | undefined,\n): UseMutationResult<TResult, unknown, TVariables, unknown>;\nexport function useFhirGraphQLMutation<\n  TResult = any,\n  TVariables = Record<string, any>,\n>(\n  query: string | TypedDocumentNode<TResult, TVariables>,\n  operationName?:\n    | string\n    | UseFhirGraphQLMutationOptions<TResult>\n    | null\n    | undefined,\n  options?: UseFhirGraphQLMutationOptions<TResult> | null | undefined,\n): UseMutationResult<TResult, unknown, TVariables, unknown> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  if (typeof operationName !== \"string\") {\n    options = operationName;\n  }\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (fhirQueryContext.manageCache) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          undefined,\n          undefined,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, variables as any, context);\n    },\n    mutationFn: (variables) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      fhirQueryContext.fhirClient.graphql(\n        query as any,\n        variables as any,\n        typeof operationName === \"string\" ? (operationName as any) : undefined,\n      ),\n  });\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { ExecutionResult } from \"graphql\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirGraphQLResultOptions<TResult = any> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          TResult,\n          unknown,\n          TResult,\n          ReturnType<(typeof FhirQueryKeys)[\"execute\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Execute a [$graphql operation](https://hl7.org/fhir/resource-operation-graphql.html).\n *\n * This hook returns the \"raw\" GraphQL ExecutionResult, including the `errors` and `extensions` field in the query data.\n * It does not put the query on error if there are GraphQL errors in the response - it is up\n * to the caller to handle them.\n *\n * Use the `useFhirGraphql` hook to have a simpler API that puts the query on error\n * whenever there are GraphQL errors.\n */\nexport function useFhirGraphQLResult<TResult = any>(\n  query: string,\n  variables?: Record<string, any>,\n  operationName?: string | null | undefined,\n  options?: UseFhirGraphQLResultOptions<TResult> | null | undefined,\n): UseQueryResult<ExecutionResult<TResult>>;\nexport function useFhirGraphQLResult<\n  TResult = any,\n  TVariables = Record<string, any>,\n>(\n  query: TypedDocumentNode<TResult, TVariables>,\n  variables?: TVariables,\n  options?: UseFhirGraphQLResultOptions<TResult> | null | undefined,\n): UseQueryResult<ExecutionResult<TResult>>;\nexport function useFhirGraphQLResult<\n  TResult = any,\n  TVariables = Record<string, any>,\n>(\n  query: string | TypedDocumentNode<TResult, TVariables>,\n  variables?: TVariables,\n  operationName?:\n    | string\n    | UseFhirGraphQLResultOptions<TResult>\n    | null\n    | undefined,\n  options?: UseFhirGraphQLResultOptions<TResult> | null | undefined,\n): UseQueryResult<ExecutionResult<TResult>> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  if (typeof operationName !== \"string\") {\n    options = operationName;\n  }\n\n  return useQuery<ExecutionResult<TResult>>({\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.execute(fhirQueryContext.clientKey, {\n      operation: \"$graphql\",\n      parameters: {\n        query,\n        variables,\n      },\n    }),\n    queryFn: () =>\n      fhirQueryContext.fhirClient.graphqlResult(\n        query as any,\n        variables as any,\n        typeof operationName === \"string\" ? (operationName as any) : undefined,\n      ),\n  });\n}\n","import {\n  AnyResource,\n  AnyResourceType,\n  BundleNavigator,\n  ExtractResource,\n  FhirClient,\n  Retrieved,\n} from \"@bonfhir/core/r4b\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirHistoryOptions<TResourceType extends AnyResourceType> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  fhir?: Parameters<FhirClient[\"history\"]>[2] | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          BundleNavigator<Retrieved<ExtractResource<TResourceType>>>,\n          unknown,\n          BundleNavigator<Retrieved<ExtractResource<TResourceType>>>,\n          ReturnType<(typeof FhirQueryKeys)[\"history\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n  pageUrl?: string | null | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a history request.\n *\n * @see https://hl7.org/fhir/http.html#history\n */\nexport function useFhirHistory<TResource extends AnyResource>(\n  resource: Retrieved<TResource>,\n  options?: UseFhirHistoryOptions<TResource[\"resourceType\"]> | null | undefined,\n): UseQueryResult<BundleNavigator<Retrieved<TResource>>>;\nexport function useFhirHistory<TResourceType extends AnyResourceType>(\n  type?: TResourceType | null | undefined,\n  id?: string | null | undefined,\n  options?: UseFhirHistoryOptions<TResourceType> | null | undefined,\n): UseQueryResult<BundleNavigator<Retrieved<ExtractResource<TResourceType>>>>;\nexport function useFhirHistory<TResourceType extends AnyResourceType>(\n  type?: TResourceType | Retrieved<AnyResource> | null | undefined,\n  id?: string | UseFhirHistoryOptions<TResourceType> | null | undefined,\n  options?: UseFhirHistoryOptions<TResourceType> | null | undefined,\n): UseQueryResult<BundleNavigator<Retrieved<ExtractResource<TResourceType>>>> {\n  if (type && typeof type !== \"string\") {\n    return useFhirHistory(\n      type.resourceType,\n      type.id,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      id as any,\n    ) as UseQueryResult<\n      BundleNavigator<Retrieved<ExtractResource<TResourceType>>>\n    >;\n  }\n\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useQuery({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.history(\n      fhirQueryContext.clientKey,\n      type,\n      id as string,\n      options?.pageUrl,\n      options?.fhir,\n    ),\n    queryFn: ({ signal }) =>\n      options?.pageUrl\n        ? fhirQueryContext.fhirClient.fetchPage(\n            options?.pageUrl,\n            { signal },\n            typeof type === \"string\" ? undefined : type || undefined,\n          )\n        : fhirQueryContext.fhirClient.history(type, id as string, {\n            ...options?.fhir,\n            signal,\n          }),\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  BundleNavigator,\n  FhirClient,\n  FhirClientSearchParameters,\n  ResourceOf,\n  ResourceTypeOf,\n  Retrieved,\n  normalizeSearchParameters,\n} from \"@bonfhir/core/r4b\";\nimport {\n  InfiniteData,\n  UseInfiniteQueryResult,\n  UseQueryOptions,\n  useInfiniteQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirInfiniteSearchOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  fhir?: Omit<Parameters<FhirClient[\"search\"]>[2], \"signal\"> | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          unknown,\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          ReturnType<(typeof FhirQueryKeys)[\"infiniteSearch\"]>\n        >,\n        | \"initialData\"\n        | \"queryKey\"\n        | \"queryFn\"\n        | \"keepPreviousData\"\n        | \"getNextPageParam\"\n      >\n    | null\n    | undefined;\n}\n\nexport function useFhirInfiniteSearch<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  type: TResourceType,\n  parameters?:\n    | FhirClientSearchParameters<ResourceTypeOf<TResourceType>>\n    | null\n    | undefined,\n  options?: UseFhirInfiniteSearchOptions<TResourceType> | null | undefined,\n): UseInfiniteQueryResult<\n  InfiniteData<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>>\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  const normalizedParameters = normalizeSearchParameters(type, parameters);\n\n  return useInfiniteQuery({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    initialPageParam: \"\",\n    queryKey: FhirQueryKeys.infiniteSearch(\n      fhirQueryContext.clientKey,\n      type,\n      normalizedParameters,\n      options?.fhir,\n    ),\n    queryFn: ({ pageParam, signal }) =>\n      pageParam\n        ? fhirQueryContext.fhirClient.fetchPage(\n            pageParam as string,\n            { signal },\n            typeof type === \"string\" ? undefined : type || undefined,\n          )\n        : fhirQueryContext.fhirClient.search(\n            type as TResourceType,\n            parameters,\n            { ...options?.fhir, signal },\n          ),\n    keepPreviousData: true,\n    getNextPageParam: (lastPage: BundleNavigator) => lastPage.linkUrl(\"next\"),\n  });\n}\n","import {\n  AnyResourceType,\n  ConcurrencyParameters,\n  ConditionalSearchParameters,\n  ExtractResource,\n  FhirClientPatchBody,\n  GeneralParameters,\n  ResourceTypeOf,\n  Retrieved,\n} from \"@bonfhir/core/r4b\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirPatchMutationArgs<\n  TResourceType extends AnyResourceType,\n> {\n  id: string;\n  body: FhirClientPatchBody<ResourceTypeOf<TResourceType>>;\n  options?:\n    | (GeneralParameters &\n        ConcurrencyParameters & {\n          versionId?: string | null | undefined;\n        } & ConditionalSearchParameters<TResourceType>)\n    | null\n    | undefined;\n}\n\nexport interface UseFhirPatchMutationOptions<\n  TResourceType extends AnyResourceType,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          Retrieved<ExtractResource<TResourceType>>,\n          unknown,\n          UseFhirPatchMutationArgs<TResourceType>,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n  manageCache?: boolean | undefined;\n}\n\n/**\n * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for a patch request.\n *\n * @see https://hl7.org/fhir/http.html#patch\n */\nexport function useFhirPatchMutation<TResourceType extends AnyResourceType>(\n  type: TResourceType,\n  options?: UseFhirPatchMutationOptions<TResourceType> | null | undefined,\n): UseMutationResult<\n  Retrieved<ExtractResource<TResourceType>>,\n  unknown,\n  UseFhirPatchMutationArgs<TResourceType>,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  const mutatorManageCache =\n    options?.manageCache === undefined || options?.manageCache;\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (mutatorManageCache && fhirQueryContext.manageCache) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          data.resourceType,\n          data.id,\n        );\n        fhirQueryContext.queryClient.setQueryData(\n          FhirQueryKeys.read(\n            fhirQueryContext.clientKey,\n            data.resourceType,\n            data.id,\n          ),\n          data,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: (args) =>\n      fhirQueryContext.fhirClient.patch(\n        type,\n        args.id,\n        args.body,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        args.options as any,\n      ),\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  FhirClient,\n  Reference,\n  ResourceOf,\n  Retrieved,\n  id as resolveId,\n} from \"@bonfhir/core/r4b\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirReadOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  fhir?: Omit<Parameters<FhirClient[\"read\"]>[2], \"signal\"> | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          Retrieved<ResourceOf<TResourceType>>,\n          unknown,\n          Retrieved<ResourceOf<TResourceType>>,\n          ReturnType<(typeof FhirQueryKeys)[\"read\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a read request.\n *\n * @see https://hl7.org/fhir/http.html#read\n */\nexport function useFhirRead<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  type: TResourceType,\n  id: string | Reference | null | undefined,\n  options?: UseFhirReadOptions<TResourceType> | null | undefined,\n): UseQueryResult<Retrieved<ResourceOf<TResourceType>>> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useQuery<Retrieved<ResourceOf<TResourceType>>>({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    enabled:\n      Boolean(id) &&\n      (options?.query?.enabled == undefined || options?.query?.enabled),\n    queryKey: FhirQueryKeys.read(\n      fhirQueryContext.clientKey,\n      type,\n      resolveId(id) || \"\",\n      options?.fhir,\n    ),\n    queryFn: ({ signal }) =>\n      fhirQueryContext.fhirClient.read(\n        type as TResourceType,\n        resolveId(id) || \"\",\n        {\n          ...options?.fhir,\n          signal: signal ?? undefined,\n        },\n      ),\n  });\n}\n","import {\n  AnyResourceType,\n  ConcurrencyParameters,\n  ConditionalSearchParameters,\n  ExtractResource,\n  GeneralParameters,\n  Retrieved,\n  isResource,\n} from \"@bonfhir/core/r4b\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport type UseFhirSaveMutationArgs<TResourceType extends AnyResourceType> =\n  | {\n      body: ExtractResource<TResourceType>;\n      options?:\n        | (GeneralParameters &\n            ConcurrencyParameters &\n            ConditionalSearchParameters<TResourceType>)\n        | null\n        | undefined;\n    }\n  | ExtractResource<TResourceType>;\n\nexport interface UseFhirSaveMutationOptions<\n  TResourceType extends AnyResourceType,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          Retrieved<ExtractResource<TResourceType>>,\n          unknown,\n          UseFhirSaveMutationArgs<TResourceType>,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for a create or update request.\n *\n * @see https://hl7.org/fhir/http.html#create\n * @see https://hl7.org/fhir/http.html#update\n */\nexport function useFhirSaveMutation<TResourceType extends AnyResourceType>(\n  type: TResourceType,\n  options?: UseFhirSaveMutationOptions<TResourceType> | null | undefined,\n): UseMutationResult<\n  Retrieved<ExtractResource<TResourceType>>,\n  unknown,\n  UseFhirSaveMutationArgs<TResourceType>,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (fhirQueryContext.manageCache) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          data.resourceType,\n          data.id,\n        );\n        fhirQueryContext.queryClient.setQueryData(\n          FhirQueryKeys.read(\n            fhirQueryContext.clientKey,\n            data.resourceType,\n            data.id,\n          ),\n          data,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: (args) =>\n      isResource(type, args)\n        ? fhirQueryContext.fhirClient.save(args)\n        : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fhirQueryContext.fhirClient.save(args.body, args.options as any),\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  BundleNavigator,\n  FhirClient,\n  FhirClientSearchParameters,\n  ResourceOf,\n  ResourceTypeOf,\n  Retrieved,\n  normalizeSearchParameters,\n} from \"@bonfhir/core/r4b\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirSearchOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  fhir?: Omit<Parameters<FhirClient[\"search\"]>[2], \"signal\"> | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          unknown,\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          ReturnType<(typeof FhirQueryKeys)[\"search\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\" | \"keepPreviousData\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a search request.\n *\n * @param parameters - the initial search parameters can either be a function that manipulates a `resourceSearch` for the\n * primary resource type or a search parameters string\n *\n * @param pageUrl - a page url extracted from previous bundle to navigate to a subsequent page.\n *\n * @see https://hl7.org/fhir/http.html#search\n *\n * @example\n *  const [pageUrl, setPageUrl] = useState(\"\");\n *  const patientQuery = useFhirSearch(\"Patient\", (search) => search.name(\"John Doe\")._sort(\"-organization\"), pageUrl);\n *\n *  // To paginate\n *  setPageUrl(patientQuery.data?.linkUrl(\"next\"));\n */\nexport function useFhirSearch<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  type: TResourceType,\n  parameters?:\n    | FhirClientSearchParameters<ResourceTypeOf<TResourceType>>\n    | null\n    | undefined,\n  pageUrl?: string | null | undefined,\n  options?: UseFhirSearchOptions<TResourceType> | null | undefined,\n): UseQueryResult<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  const normalizedParameters = normalizeSearchParameters(type, parameters);\n\n  return useQuery<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>>({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.search(\n      fhirQueryContext.clientKey,\n      type,\n      normalizedParameters,\n      pageUrl,\n      options?.fhir,\n    ),\n    queryFn: ({ signal }) =>\n      pageUrl\n        ? fhirQueryContext.fhirClient.fetchPage(\n            pageUrl,\n            { signal },\n            typeof type === \"string\" ? undefined : type || undefined,\n          )\n        : fhirQueryContext.fhirClient.search(type, parameters, {\n            ...options?.fhir,\n            signal,\n          }),\n    keepPreviousData: true,\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  BundleNavigator,\n  FhirClientSearchParameters,\n  ResourceOf,\n  ResourceTypeOf,\n  Retrieved,\n  normalizeSearchParameters,\n} from \"@bonfhir/core/r4b\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirSearchAllPagesOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          unknown,\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          ReturnType<(typeof FhirQueryKeys)[\"search\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\" | \"keepPreviousData\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a search request.\n *\n * @param parameters - the initial search parameters can either be a function that manipulates a `resourceSearch` for the\n * primary resource type or a search parameters string\n *\n * @see https://hl7.org/fhir/http.html#search\n */\nexport function useFhirSearchAllPages<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  type: TResourceType,\n  parameters: FhirClientSearchParameters<ResourceTypeOf<TResourceType>>,\n  options?: UseFhirSearchAllPagesOptions<TResourceType> | null | undefined,\n): UseQueryResult<BundleNavigator<ResourceOf<TResourceType>>> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  const normalizedParameters = normalizeSearchParameters(type, parameters);\n\n  return useQuery<BundleNavigator<ResourceOf<TResourceType>>>({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.search(\n      fhirQueryContext.clientKey,\n      type,\n      normalizedParameters,\n    ),\n    queryFn: ({ signal }) =>\n      fhirQueryContext.fhirClient.searchAllPages(type, parameters, { signal }),\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  BundleNavigator,\n  FhirClient,\n  FhirClientSearchParameters,\n  ResourceOf,\n  ResourceTypeOf,\n  Retrieved,\n  WithResolvableReferences,\n  normalizeSearchParameters,\n} from \"@bonfhir/core/r4b\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirSearchOneOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  fhir?:\n    | Omit<Parameters<FhirClient[\"searchOne\"]>[2], \"signal\">\n    | null\n    | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          unknown,\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          ReturnType<(typeof FhirQueryKeys)[\"search\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\" | \"keepPreviousData\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a search request.\n *\n * @param parameters - the initial search parameters can either be a function that manipulates a `resourceSearch` for the\n * primary resource type or a search parameters string\n *\n * @see https://hl7.org/fhir/http.html#search\n */\nexport function useFhirSearchOne<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  type: TResourceType,\n  parameters?:\n    | FhirClientSearchParameters<ResourceTypeOf<TResourceType>>\n    | null\n    | undefined,\n  options?: UseFhirSearchOneOptions<TResourceType> | null | undefined,\n): UseQueryResult<\n  WithResolvableReferences<Retrieved<ResourceOf<TResourceType>>>\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  const normalizedParameters = normalizeSearchParameters(type, parameters);\n\n  return useQuery<\n    WithResolvableReferences<Retrieved<ResourceOf<TResourceType>>>\n  >({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.search(\n      fhirQueryContext.clientKey,\n      type,\n      normalizedParameters,\n      undefined,\n      options?.fhir,\n    ),\n    queryFn: ({ signal }) =>\n      fhirQueryContext.fhirClient.searchOne(type, parameters, {\n        ...options?.fhir,\n        signal,\n      }),\n  });\n}\n","import { BundleExecutor, Resource, Retrieved } from \"@bonfhir/core/r4b\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport type UseFhirTransactionMutationArgs = (\n  executor: BundleExecutor,\n) => unknown;\n\nexport interface UseFhirTransactionMutationOptions {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          BundleExecutor,\n          unknown,\n          UseFhirTransactionMutationArgs,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * The transaction interaction submits a set of actions to perform on a server in a single HTTP request/response.\n * All entries execute in a single transaction on the server.\n *\n * @see https://hl7.org/fhir/http.html#transaction\n */\nexport function useFhirTransactionMutation(\n  options?: UseFhirTransactionMutationOptions | null | undefined,\n): UseMutationResult<\n  BundleExecutor,\n  unknown,\n  UseFhirTransactionMutationArgs,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (fhirQueryContext.manageCache) {\n        for (const resource of data.futureRequests.map((x) => x.resource)) {\n          if (\n            (resource as Resource).resourceType &&\n            (resource as Retrieved<Resource>).id\n          ) {\n            FhirQueryKeys.invalidateQueries(\n              fhirQueryContext.clientKey,\n              fhirQueryContext.queryClient,\n              (resource as Resource).resourceType,\n              (resource as Retrieved<Resource>).id,\n            );\n          }\n        }\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: async (args) => {\n      const executor = fhirQueryContext.fhirClient.transaction();\n      args(executor);\n      await executor.send();\n      // We touch all resources to ensure there are no errors at this stage\n      for (const x of executor.futureRequests) x.resource;\n      return executor;\n    },\n  });\n}\n","import {\n  AnyResourceType,\n  ConcurrencyParameters,\n  ConditionalSearchParameters,\n  ExtractResource,\n  GeneralParameters,\n  Retrieved,\n  isResource,\n} from \"@bonfhir/core/r4b\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport type UseFhirUpdateMutationArgs<TResourceType extends AnyResourceType> =\n  | {\n      body: ExtractResource<TResourceType>;\n      options?:\n        | (GeneralParameters &\n            ConcurrencyParameters &\n            ConditionalSearchParameters<TResourceType>)\n        | null\n        | undefined;\n    }\n  | ExtractResource<TResourceType>;\n\nexport interface UseFhirUpdateMutationOptions<\n  TResourceType extends AnyResourceType,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          Retrieved<ExtractResource<TResourceType>>,\n          unknown,\n          UseFhirUpdateMutationArgs<TResourceType>,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for an update request.\n *\n * @see https://hl7.org/fhir/http.html#update\n */\nexport function useFhirUpdateMutation<TResourceType extends AnyResourceType>(\n  type: TResourceType,\n  options?: UseFhirUpdateMutationOptions<TResourceType> | null | undefined,\n): UseMutationResult<\n  Retrieved<ExtractResource<TResourceType>>,\n  unknown,\n  UseFhirUpdateMutationArgs<TResourceType>,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (fhirQueryContext.manageCache) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          data.resourceType,\n          data.id,\n        );\n        fhirQueryContext.queryClient.setQueryData(\n          FhirQueryKeys.read(\n            fhirQueryContext.clientKey,\n            data.resourceType,\n            data.id,\n          ),\n          data,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: (args) =>\n      isResource(type, args)\n        ? fhirQueryContext.fhirClient.update(args)\n        : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fhirQueryContext.fhirClient.update(args.body, args.options as any),\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  FhirClient,\n  Reference,\n  ResourceOf,\n  Retrieved,\n  id as resolveId,\n} from \"@bonfhir/core/r4b\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirVReadOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  fhir?: Omit<Parameters<FhirClient[\"vread\"]>[3], \"signal\"> | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          Retrieved<ResourceOf<TResourceType>>,\n          unknown,\n          Retrieved<ResourceOf<TResourceType>>,\n          ReturnType<(typeof FhirQueryKeys)[\"vread\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a vread request.\n *\n * @see https://hl7.org/fhir/http.html#vread\n */\nexport function useFhirVRead<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  type: TResourceType,\n  id: string | Reference | null | undefined,\n  vid: string | null | undefined,\n  options?: UseFhirVReadOptions<TResourceType> | null | undefined,\n): UseQueryResult<Retrieved<ResourceOf<TResourceType>>> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useQuery<Retrieved<ResourceOf<TResourceType>>>({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    enabled:\n      Boolean(id) &&\n      Boolean(vid) &&\n      (options?.query?.enabled == undefined || options?.query?.enabled),\n    queryKey: FhirQueryKeys.vread(\n      fhirQueryContext.clientKey,\n      type,\n      resolveId(id) || \"\",\n      vid || \"\",\n      options?.fhir,\n    ),\n    queryFn: ({ signal }) =>\n      fhirQueryContext.fhirClient.vread(type, resolveId(id) || \"\", vid || \"\", {\n        ...options?.fhir,\n        signal,\n      }),\n  });\n}\n","import { FetchFhirClient, FhirClient } from \"@bonfhir/core/r4b\";\nimport {\n  QueryClient,\n  QueryClientConfig,\n  QueryClientProvider,\n} from \"@tanstack/react-query\";\nimport { PropsWithChildren, useMemo } from \"react\";\nimport { DEFAULT_FHIR_CLIENT, FhirQueryContext } from \"./context\";\n\nexport type FhirQueryProviderProps = PropsWithChildren<\n  {\n    /**\n     * The {@link FhirRestfulClient} to make FHIR HTTP requests.\n     */\n    fhirClient: FhirClient | string | Record<string, FhirClient | string>;\n\n    /**\n     * Set to `false` to disable default cache invalidation / optimization strategies implemented in default hooks.\n     */\n    manageCache?: boolean | null | undefined;\n  } & (\n    | {\n        /**\n         * An existing {@link QueryClient} instance to use. If none is provided, a default instance is created\n         * and managed automatically.\n         */\n        queryClient?: QueryClient | null | undefined;\n      }\n    | {\n        /**\n         * Any custom {@link QueryClientConfig} configuration options to use.\n         */\n        queryClientConfig?: QueryClientConfig | null | undefined;\n      }\n  )\n>;\n\n/**\n * Provide a context for fhir-query hooks.\n * Should probably be placed near the top of your React app render tree.\n */\nexport function FhirQueryProvider(props: FhirQueryProviderProps) {\n  const fhirClient = normalizeFhirClient(props.fhirClient);\n  const manageCache = props.manageCache == undefined || props.manageCache;\n  if (hasQueryClient(props)) {\n    return (\n      <FhirQueryContext.Provider\n        value={{\n          fhirClient,\n          queryClient: props.queryClient,\n          manageCache,\n        }}\n      >\n        {props.children}\n      </FhirQueryContext.Provider>\n    );\n  }\n\n  const queryClient = useMemo(\n    () =>\n      new QueryClient(\n        hasQueryClientConfig(props) ? props.queryClientConfig : undefined,\n      ),\n    [],\n  );\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <FhirQueryContext.Provider\n        value={{\n          fhirClient,\n          queryClient,\n          manageCache: manageCache,\n        }}\n      >\n        {props.children}\n      </FhirQueryContext.Provider>\n    </QueryClientProvider>\n  );\n}\n\nfunction hasQueryClient(\n  value: FhirQueryProviderProps,\n): value is FhirQueryProviderProps & { queryClient: QueryClient } {\n  return !!(value as { queryClient: QueryClient }).queryClient;\n}\n\nfunction hasQueryClientConfig(\n  value: FhirQueryProviderProps,\n): value is FhirQueryProviderProps & { queryClientConfig: QueryClientConfig } {\n  return !!(value as { queryClientConfig: QueryClientConfig })\n    .queryClientConfig;\n}\n\nfunction normalizeFhirClient(\n  fhirClient: FhirQueryProviderProps[\"fhirClient\"],\n): FhirQueryContext[\"fhirClient\"] {\n  if (isFhirClientMap(fhirClient)) {\n    const result = Object.fromEntries(\n      Object.entries(fhirClient)\n        .map(([key, value]) => [\n          key ?? DEFAULT_FHIR_CLIENT,\n          typeof value === \"string\"\n            ? new FetchFhirClient({ baseUrl: value })\n            : value,\n        ])\n        .map(([key, value]) => [key, value]),\n    );\n\n    if (!result[DEFAULT_FHIR_CLIENT]) {\n      throw new Error(\n        `Missing a default FhirClient. You must provide a default FhirClient in the fhirClient prop using either an empty string or the \"${DEFAULT_FHIR_CLIENT}\" key.`,\n      );\n    }\n    return result;\n  }\n\n  return {\n    [DEFAULT_FHIR_CLIENT]:\n      typeof fhirClient === \"string\"\n        ? new FetchFhirClient({ baseUrl: fhirClient })\n        : fhirClient,\n  };\n}\n\nfunction isFhirClientMap(\n  fhirClient: FhirQueryProviderProps[\"fhirClient\"],\n): fhirClient is Record<string, FhirClient | string> {\n  if (typeof fhirClient === \"string\") {\n    return false;\n  }\n\n  if (fhirClient[\"fetch\"]) {\n    return false;\n  }\n\n  return true;\n}\n"],"names":["r4b","require","react","reactQuery","jsxRuntime","FhirQueryKeys","read","clientKey","type","id","options","resourceTypeOf","vread","vid","history","pageUrl","search","parameters","infiniteSearch","capabilities","mode","execute","operation","resourceType","resourceId","clientFn","fn","params","invalidateQueries","queryClient","queryKey","undefined","DEFAULT_FHIR_CLIENT","FhirQueryContext","createContext","useFhirQueryContext","context","useContext","Error","useFhirClientQueryContext","client","fhirClient","useFhirBatchMutation","fhirQueryContext","useMutation","mutation","onSuccess","data","variables","resource","futureRequests","map","x","mutationFn","async","args","executor","batch","send","useFhirCapabilities","useQuery","query","queryFn","useFhirClient","toString","useFhirClientMutation","manageCache","doNotInvalidateAllQueries","useFhirCreateMutation","setQueryData","isResource","create","body","useFhirCreateOrMutation","_type","isChanged","createOr","action","useFhirDeleteMutation","delete","useFhirExecute","affectsState","useFhirExecuteMutation","useFhirGraph","graph","useFhirGraphQL","operationName","graphql","useFhirGraphQLMutation","useFhirGraphQLResult","graphqlResult","useFhirHistory","fhir","signal","fetchPage","useFhirInfiniteSearch","normalizedParameters","normalizeSearchParameters","useInfiniteQuery","initialPageParam","pageParam","keepPreviousData","getNextPageParam","lastPage","linkUrl","useFhirPatchMutation","mutatorManageCache","patch","useFhirRead","enabled","Boolean","resolveId","useFhirSaveMutation","save","useFhirSearch","useFhirSearchAllPages","searchAllPages","useFhirSearchOne","searchOne","useFhirTransactionMutation","transaction","useFhirUpdateMutation","update","useFhirVRead","FhirQueryProvider","props","normalizeFhirClient","hasQueryClient","_jsx","Provider","value","children","useMemo","QueryClient","hasQueryClientConfig","queryClientConfig","QueryClientProvider","isFhirClientMap","result","Object","fromEntries","entries","key","FetchFhirClient","baseUrl","exports"],"mappings":"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"}