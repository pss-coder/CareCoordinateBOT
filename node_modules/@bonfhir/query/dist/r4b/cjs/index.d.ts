/// <reference types="react" />
import * as _bonfhir_core_r4b from '@bonfhir/core/r4b';
import { AnyResourceTypeOrCustomResource, GeneralParameters, AnyResourceType, FhirClient, Operation, BundleExecutor, CapabilityStatement, TerminologyCapabilities, ExtractResource, ConditionalSearchParameters, Retrieved, CreateOrAction, ResourceOf, FhirClientSearchParameters, MergeResult, BundleNavigator, AnyResource, ResourceTypeOf, FhirClientPatchBody, ConcurrencyParameters, Reference, WithResolvableReferences } from '@bonfhir/core/r4b';
import { QueryClient, UseMutationOptions, UseMutationResult, UseQueryOptions, UseQueryResult, UseInfiniteQueryResult, InfiniteData, QueryClientConfig } from '@tanstack/react-query';
import * as react from 'react';
import { PropsWithChildren } from 'react';
import { TypedDocumentNode } from '@graphql-typed-document-node/core';
import { ExecutionResult } from 'graphql';
import * as react_jsx_runtime from 'react/jsx-runtime';

/**
 * Manages [Query keys](https://tanstack.com/query/latest/docs/react/guides/query-keys) and
 * cache optimizations / invalidations.
 */
declare const FhirQueryKeys: {
    /**
     * Get the query keys for a read request
     */
    read: (clientKey: string, type: AnyResourceTypeOrCustomResource, id: string, options?: GeneralParameters | null | undefined) => readonly [string, AnyResourceType, string, "read", AnyResourceTypeOrCustomResource, GeneralParameters | null | undefined];
    /**
     * Get the query keys for a vread request
     */
    vread: (clientKey: string, type: AnyResourceTypeOrCustomResource, id: string, vid: string, options?: Parameters<FhirClient["vread"]>[3] | null | undefined) => readonly [string, AnyResourceType, string, "vread", string, AnyResourceTypeOrCustomResource, GeneralParameters | null | undefined];
    /**
     * Get the query keys for a history request
     */
    history: (clientKey: string, type: AnyResourceTypeOrCustomResource | null | undefined, id: string | null | undefined, pageUrl?: string | null | undefined, options?: Parameters<FhirClient["history"]>[2] | null | undefined) => readonly [string, "history", (GeneralParameters & _bonfhir_core_r4b.HistoryParameters) | null | undefined] | readonly [string, AnyResourceType | undefined, "history", AnyResourceTypeOrCustomResource | null | undefined, string | null | undefined, (GeneralParameters & _bonfhir_core_r4b.HistoryParameters) | null | undefined] | readonly [string, AnyResourceType | undefined, string, "history", AnyResourceTypeOrCustomResource | null | undefined, string | null | undefined, (GeneralParameters & _bonfhir_core_r4b.HistoryParameters) | null | undefined];
    /**
     * Get the query keys for a search request
     */
    search: (clientKey: string, type: AnyResourceTypeOrCustomResource, parameters?: string | null | undefined, pageUrl?: string | null | undefined, options?: Parameters<FhirClient["search"]>[2] | null | undefined) => readonly [string, AnyResourceType, "search", AnyResourceTypeOrCustomResource, string | null | undefined, string | null | undefined, GeneralParameters | null | undefined];
    /**
     * Get the query keys for a infinite search request
     */
    infiniteSearch: (clientKey: string, type: AnyResourceTypeOrCustomResource, parameters?: string | null | undefined, options?: Parameters<FhirClient["search"]>[2] | null | undefined) => readonly [string, AnyResourceType, "infiniteSearch", AnyResourceTypeOrCustomResource, string | null | undefined, GeneralParameters | null | undefined];
    /**
     * Get the query keys for a capabilities request
     */
    capabilities: (clientKey: string, mode: string | null | undefined) => readonly [string, "capabilities", string | null | undefined];
    /**
     * Get the query keys for an execute request
     */
    execute: (clientKey: string, operation: Operation | Record<string, unknown>) => readonly [string, unknown, unknown, "execute", unknown, unknown];
    clientFn: (clientKey: string, fn: string, params: unknown[]) => readonly [string, "client", string, ...unknown[]];
    /**
     * Invalidate all queries that might be impacted by a change on a resource.
     */
    invalidateQueries: (clientKey: string, queryClient: QueryClient, type: AnyResourceType | undefined, id: string | undefined) => void;
};

/**
 * The name for the default {@link FhirClient}.
 */
declare const DEFAULT_FHIR_CLIENT = "default";
interface FhirQueryContext {
    /**
     * The {@link FhirClient} to make FHIR HTTP requests.
     */
    fhirClient: Record<string | typeof DEFAULT_FHIR_CLIENT, FhirClient>;
    /**
     * The {@link QueryClient} used to manage the state.
     */
    queryClient: QueryClient;
    /**
     * `true` when the cache invalidation / optimizations are managed by the default hooks.
     */
    manageCache: boolean;
}
/**
 * The context used by fhir-query.
 */
declare const FhirQueryContext: react.Context<FhirQueryContext | undefined>;
/**
 * Get the current {@link FhirQueryContext}.
 *
 * @throws Error if no parent context exists (a.k.a. no `FhirQueryProvider` was used in the parent tree).
 */
declare function useFhirQueryContext(): FhirQueryContext;
/**
 * Get the current {@link FhirQueryContext} with a specific fhirClient.
 *
 * @throws Error if no parent context exists (a.k.a. no `FhirQueryProvider` was used in the parent tree).
 */
declare function useFhirClientQueryContext(client: string | null | undefined): Omit<FhirQueryContext, "fhirClient"> & {
    fhirClient: FhirClient;
    clientKey: string;
};

type UseFhirBatchMutationArgs = (executor: BundleExecutor) => unknown;
interface UseFhirBatchMutationOptions {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    mutation?: Omit<UseMutationOptions<BundleExecutor, unknown, UseFhirBatchMutationArgs, unknown>, "mutationFn"> | null | undefined;
}
/**
 * The batch interaction submits a set of actions to perform on a server in a single HTTP request/response.
 * Each entry executes in a different transaction on the server.
 *
 * @see https://hl7.org/fhir/http.html#transaction
 */
declare function useFhirBatchMutation(options?: UseFhirBatchMutationOptions | null | undefined): UseMutationResult<BundleExecutor, unknown, UseFhirBatchMutationArgs, unknown>;

interface UseFhirCapabilitiesOptions<TResourceType extends CapabilityStatement | TerminologyCapabilities> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    query?: Omit<UseQueryOptions<TResourceType, unknown, TResourceType, ReturnType<(typeof FhirQueryKeys)["capabilities"]>>, "initialData" | "queryKey" | "queryFn"> | null | undefined;
}
/**
 * The capabilities interaction retrieves the information about a server's capabilities - which portions of this specification it supports.
 *
 * https://hl7.org/fhir/http.html#capabilities
 */
declare function useFhirCapabilities(mode?: "full" | "normative" | null | undefined, options?: UseFhirCapabilitiesOptions<CapabilityStatement> | null | undefined): UseQueryResult<CapabilityStatement>;
declare function useFhirCapabilities(mode: "terminology", options?: UseFhirCapabilitiesOptions<TerminologyCapabilities> | null | undefined): UseQueryResult<TerminologyCapabilities>;

interface UseFhirClientOptions<TResult> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    query?: Omit<UseQueryOptions<TResult, unknown, TResult, ReturnType<(typeof FhirQueryKeys)["clientFn"]>>, "initialData" | "queryKey" | "queryFn"> | null | undefined;
}
/**
 * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) using a FhirClient directly.
 */
declare function useFhirClient<TResult>(fn: (client: FhirClient) => Promise<TResult>, params?: unknown[], options?: UseFhirClientOptions<TResult> | null | undefined): UseQueryResult<TResult>;

type UseFhirClientMutationArgs<TResult> = (client: FhirClient) => Promise<TResult>;
interface UseFhirClientMutationOptions<TResult> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    mutation?: Omit<UseMutationOptions<TResult, unknown, UseFhirClientMutationArgs<TResult>, unknown>, "mutationFn"> | null | undefined;
    /**
     * Whether to invalidate all queries that use the same FhirClient.
     * IF true, you should probably think about doing manual invalidation in the `onSuccess` callback.
     */
    doNotInvalidateAllQueries?: boolean;
}
/**
 * This hook allows you to perform one or several operations using a FhirClient directly.
 *
 * Invoking it will invalidate all queries that use the same FhirClient if `manageCache` is true (the default).
 */
declare function useFhirClientMutation<TResult = unknown>(options?: UseFhirClientMutationOptions<TResult> | null | undefined): UseMutationResult<TResult, unknown, UseFhirClientMutationArgs<TResult>, unknown>;

type UseFhirCreateMutationArgs<TResourceType extends AnyResourceType> = {
    body: ExtractResource<TResourceType>;
    options?: (GeneralParameters & ConditionalSearchParameters<TResourceType>) | null | undefined;
} | ExtractResource<TResourceType>;
interface UseFhirCreateMutationOptions<TResourceType extends AnyResourceType> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    mutation?: Omit<UseMutationOptions<Retrieved<ExtractResource<TResourceType>>, unknown, UseFhirCreateMutationArgs<TResourceType>, unknown>, "mutationFn"> | null | undefined;
}
/**
 * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for a create request.
 *
 * @see https://hl7.org/fhir/http.html#create
 */
declare function useFhirCreateMutation<TResourceType extends AnyResourceType>(type: TResourceType, options?: UseFhirCreateMutationOptions<TResourceType> | null | undefined): UseMutationResult<Retrieved<ExtractResource<TResourceType>>, unknown, UseFhirCreateMutationArgs<TResourceType>, unknown>;

type UseFhirCreateOrMutationArgs<TResourceType extends AnyResourceTypeOrCustomResource> = {
    action: CreateOrAction;
    body: ResourceOf<TResourceType>;
    search?: FhirClientSearchParameters<ResourceOf<TResourceType>["resourceType"]> | null | undefined;
};
interface UseFhirCreateOrMutationOptions<TResourceType extends AnyResourceTypeOrCustomResource> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    mutation?: Omit<UseMutationOptions<MergeResult<Retrieved<ResourceOf<TResourceType>>>, unknown, UseFhirCreateOrMutationArgs<TResourceType>, unknown>, "mutationFn"> | null | undefined;
}
declare function useFhirCreateOrMutation<TResourceType extends AnyResourceTypeOrCustomResource>(_type: TResourceType, options?: UseFhirCreateOrMutationOptions<TResourceType> | null | undefined): UseMutationResult<MergeResult<Retrieved<ResourceOf<TResourceType>>>, unknown, UseFhirCreateOrMutationArgs<TResourceType>, unknown>;

interface UseFhirDeleteMutationArgs {
    resourceType: AnyResourceType;
    id: string;
    options?: GeneralParameters | null | undefined;
}
interface UseFhirDeleteMutationOptions {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    mutation?: Omit<UseMutationOptions<void, unknown, UseFhirDeleteMutationArgs, unknown>, "mutationFn"> | null | undefined;
}
/**
 * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for a delete request.
 *
 * @see https://hl7.org/fhir/http.html#delete
 */
declare function useFhirDeleteMutation(options?: UseFhirDeleteMutationOptions | null | undefined): UseMutationResult<void, unknown, UseFhirDeleteMutationArgs, unknown>;

interface UseFhirExecuteOptions<TOperationResult> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    query?: Omit<UseQueryOptions<TOperationResult, unknown, TOperationResult, ReturnType<(typeof FhirQueryKeys)["execute"]>>, "initialData" | "queryKey" | "queryFn"> | null | undefined;
}
/**
 * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for an operation request.
 * If  you want to execute an operation that affects state, you should use the {@link useFhirExecuteMutation} hook instead.
 *
 * @see https://hl7.org/fhir/operations.html
 * @see https://www.hl7.org/fhir/operationslist.html
 */
declare function useFhirExecute<TOperationResult>(operation: Operation, options?: UseFhirExecuteOptions<Operation> | null | undefined): UseQueryResult<TOperationResult>;

interface UseFhirExecuteMutationOptions<TOperationResult> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    mutation?: Omit<UseMutationOptions<TOperationResult, unknown, Operation, unknown>, "mutationFn"> | null | undefined;
}
/**
 * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for an operation request.
 *
 * This version is to be used when the operation affects state, or you want to avoid query caching.
 * If that's not the case, consider using the {@link useFhirExecute} hook instead.
 *
 * @see https://hl7.org/fhir/operations.html
 * @see https://www.hl7.org/fhir/operationslist.html
 */
declare function useFhirExecuteMutation<TOperationResult>(options?: UseFhirExecuteMutationOptions<TOperationResult> | null | undefined): UseMutationResult<TOperationResult, unknown, Operation, unknown>;

interface UseFhirGraphOptions<TResourceType extends AnyResourceTypeOrCustomResource> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    query?: Omit<UseQueryOptions<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>, unknown, BundleNavigator<Retrieved<ResourceOf<TResourceType>>>, ReturnType<(typeof FhirQueryKeys)["execute"]>>, "initialData" | "queryKey" | "queryFn"> | null | undefined;
}
/**
 * Execute a [$graph operation](http://hl7.org/fhir/R4B/resource-operation-graph.html) to retrieve an entire graph
 * of resources.
 *
 * @see http://hl7.org/fhir/R4B/resource-operation-graph.html
 */
declare function useFhirGraph<TResourceType extends AnyResourceTypeOrCustomResource>(graph: string, resourceType?: TResourceType | null | undefined, resourceId?: string | null | undefined, options?: UseFhirGraphOptions<TResourceType> | null | undefined): UseQueryResult<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>>;

interface UseFhirGraphQLOptions<TResult = any> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    query?: Omit<UseQueryOptions<TResult, unknown, TResult, ReturnType<(typeof FhirQueryKeys)["execute"]>>, "initialData" | "queryKey" | "queryFn"> | null | undefined;
}
/**
 * Execute a [$graphql operation](https://hl7.org/fhir/resource-operation-graphql.html).
 *
 * This hook puts the query on error if there are GraphQL errors in the response.
 * This make it easier to reason about, but do not support partial errors in GraphQL.
 *
 * Use the `useFhirGraphqlResult` hook to have access to the raw GraphQL response,
 * including the `errors` and `extensions` field.
 */
declare function useFhirGraphQL<TResult = any>(query: string, variables?: Record<string, any>, operationName?: string | null | undefined, options?: UseFhirGraphQLOptions<TResult> | null | undefined): UseQueryResult<TResult>;
declare function useFhirGraphQL<TResult = any, TVariables = Record<string, any>>(query: TypedDocumentNode<TResult, TVariables>, variables?: TVariables, options?: UseFhirGraphQLOptions<TResult> | null | undefined): UseQueryResult<TResult>;

interface UseFhirGraphQLMutationOptions<TResult = any, TVariables = Record<string, any>> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    mutation?: Omit<UseMutationOptions<TResult, unknown, TVariables, unknown>, "mutationFn"> | null | undefined;
}
/**
 * Execute a [$graphql mutation](https://hl7.org/fhir/resource-operation-graphql.html).
 *
 * The mutation is put on error if there are GraphQL errors in the response.
 */
declare function useFhirGraphQLMutation<TResult = any>(query: string, operationName?: string | null | undefined, options?: UseFhirGraphQLMutationOptions<TResult> | null | undefined): UseMutationResult<TResult, unknown, Record<string, any>, unknown>;
declare function useFhirGraphQLMutation<TResult = any, TVariables = Record<string, any>>(query: TypedDocumentNode<TResult, TVariables>, options?: UseFhirGraphQLMutationOptions<TResult> | null | undefined): UseMutationResult<TResult, unknown, TVariables, unknown>;

interface UseFhirGraphQLResultOptions<TResult = any> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    query?: Omit<UseQueryOptions<TResult, unknown, TResult, ReturnType<(typeof FhirQueryKeys)["execute"]>>, "initialData" | "queryKey" | "queryFn"> | null | undefined;
}
/**
 * Execute a [$graphql operation](https://hl7.org/fhir/resource-operation-graphql.html).
 *
 * This hook returns the "raw" GraphQL ExecutionResult, including the `errors` and `extensions` field in the query data.
 * It does not put the query on error if there are GraphQL errors in the response - it is up
 * to the caller to handle them.
 *
 * Use the `useFhirGraphql` hook to have a simpler API that puts the query on error
 * whenever there are GraphQL errors.
 */
declare function useFhirGraphQLResult<TResult = any>(query: string, variables?: Record<string, any>, operationName?: string | null | undefined, options?: UseFhirGraphQLResultOptions<TResult> | null | undefined): UseQueryResult<ExecutionResult<TResult>>;
declare function useFhirGraphQLResult<TResult = any, TVariables = Record<string, any>>(query: TypedDocumentNode<TResult, TVariables>, variables?: TVariables, options?: UseFhirGraphQLResultOptions<TResult> | null | undefined): UseQueryResult<ExecutionResult<TResult>>;

interface UseFhirHistoryOptions<TResourceType extends AnyResourceType> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    fhir?: Parameters<FhirClient["history"]>[2] | null | undefined;
    query?: Omit<UseQueryOptions<BundleNavigator<Retrieved<ExtractResource<TResourceType>>>, unknown, BundleNavigator<Retrieved<ExtractResource<TResourceType>>>, ReturnType<(typeof FhirQueryKeys)["history"]>>, "initialData" | "queryKey" | "queryFn"> | null | undefined;
    pageUrl?: string | null | undefined;
}
/**
 * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a history request.
 *
 * @see https://hl7.org/fhir/http.html#history
 */
declare function useFhirHistory<TResource extends AnyResource>(resource: Retrieved<TResource>, options?: UseFhirHistoryOptions<TResource["resourceType"]> | null | undefined): UseQueryResult<BundleNavigator<Retrieved<TResource>>>;
declare function useFhirHistory<TResourceType extends AnyResourceType>(type?: TResourceType | null | undefined, id?: string | null | undefined, options?: UseFhirHistoryOptions<TResourceType> | null | undefined): UseQueryResult<BundleNavigator<Retrieved<ExtractResource<TResourceType>>>>;

interface UseFhirInfiniteSearchOptions<TResourceType extends AnyResourceTypeOrCustomResource> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    fhir?: Omit<Parameters<FhirClient["search"]>[2], "signal"> | null | undefined;
    query?: Omit<UseQueryOptions<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>, unknown, BundleNavigator<Retrieved<ResourceOf<TResourceType>>>, ReturnType<(typeof FhirQueryKeys)["infiniteSearch"]>>, "initialData" | "queryKey" | "queryFn" | "keepPreviousData" | "getNextPageParam"> | null | undefined;
}
declare function useFhirInfiniteSearch<TResourceType extends AnyResourceTypeOrCustomResource>(type: TResourceType, parameters?: FhirClientSearchParameters<ResourceTypeOf<TResourceType>> | null | undefined, options?: UseFhirInfiniteSearchOptions<TResourceType> | null | undefined): UseInfiniteQueryResult<InfiniteData<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>>>;

interface UseFhirPatchMutationArgs<TResourceType extends AnyResourceType> {
    id: string;
    body: FhirClientPatchBody<ResourceTypeOf<TResourceType>>;
    options?: (GeneralParameters & ConcurrencyParameters & {
        versionId?: string | null | undefined;
    } & ConditionalSearchParameters<TResourceType>) | null | undefined;
}
interface UseFhirPatchMutationOptions<TResourceType extends AnyResourceType> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    mutation?: Omit<UseMutationOptions<Retrieved<ExtractResource<TResourceType>>, unknown, UseFhirPatchMutationArgs<TResourceType>, unknown>, "mutationFn"> | null | undefined;
    manageCache?: boolean | undefined;
}
/**
 * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for a patch request.
 *
 * @see https://hl7.org/fhir/http.html#patch
 */
declare function useFhirPatchMutation<TResourceType extends AnyResourceType>(type: TResourceType, options?: UseFhirPatchMutationOptions<TResourceType> | null | undefined): UseMutationResult<Retrieved<ExtractResource<TResourceType>>, unknown, UseFhirPatchMutationArgs<TResourceType>, unknown>;

interface UseFhirReadOptions<TResourceType extends AnyResourceTypeOrCustomResource> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    fhir?: Omit<Parameters<FhirClient["read"]>[2], "signal"> | null | undefined;
    query?: Omit<UseQueryOptions<Retrieved<ResourceOf<TResourceType>>, unknown, Retrieved<ResourceOf<TResourceType>>, ReturnType<(typeof FhirQueryKeys)["read"]>>, "initialData" | "queryKey" | "queryFn"> | null | undefined;
}
/**
 * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a read request.
 *
 * @see https://hl7.org/fhir/http.html#read
 */
declare function useFhirRead<TResourceType extends AnyResourceTypeOrCustomResource>(type: TResourceType, id: string | Reference | null | undefined, options?: UseFhirReadOptions<TResourceType> | null | undefined): UseQueryResult<Retrieved<ResourceOf<TResourceType>>>;

type UseFhirSaveMutationArgs<TResourceType extends AnyResourceType> = {
    body: ExtractResource<TResourceType>;
    options?: (GeneralParameters & ConcurrencyParameters & ConditionalSearchParameters<TResourceType>) | null | undefined;
} | ExtractResource<TResourceType>;
interface UseFhirSaveMutationOptions<TResourceType extends AnyResourceType> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    mutation?: Omit<UseMutationOptions<Retrieved<ExtractResource<TResourceType>>, unknown, UseFhirSaveMutationArgs<TResourceType>, unknown>, "mutationFn"> | null | undefined;
}
/**
 * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for a create or update request.
 *
 * @see https://hl7.org/fhir/http.html#create
 * @see https://hl7.org/fhir/http.html#update
 */
declare function useFhirSaveMutation<TResourceType extends AnyResourceType>(type: TResourceType, options?: UseFhirSaveMutationOptions<TResourceType> | null | undefined): UseMutationResult<Retrieved<ExtractResource<TResourceType>>, unknown, UseFhirSaveMutationArgs<TResourceType>, unknown>;

interface UseFhirSearchOptions<TResourceType extends AnyResourceTypeOrCustomResource> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    fhir?: Omit<Parameters<FhirClient["search"]>[2], "signal"> | null | undefined;
    query?: Omit<UseQueryOptions<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>, unknown, BundleNavigator<Retrieved<ResourceOf<TResourceType>>>, ReturnType<(typeof FhirQueryKeys)["search"]>>, "initialData" | "queryKey" | "queryFn" | "keepPreviousData"> | null | undefined;
}
/**
 * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a search request.
 *
 * @param parameters - the initial search parameters can either be a function that manipulates a `resourceSearch` for the
 * primary resource type or a search parameters string
 *
 * @param pageUrl - a page url extracted from previous bundle to navigate to a subsequent page.
 *
 * @see https://hl7.org/fhir/http.html#search
 *
 * @example
 *  const [pageUrl, setPageUrl] = useState("");
 *  const patientQuery = useFhirSearch("Patient", (search) => search.name("John Doe")._sort("-organization"), pageUrl);
 *
 *  // To paginate
 *  setPageUrl(patientQuery.data?.linkUrl("next"));
 */
declare function useFhirSearch<TResourceType extends AnyResourceTypeOrCustomResource>(type: TResourceType, parameters?: FhirClientSearchParameters<ResourceTypeOf<TResourceType>> | null | undefined, pageUrl?: string | null | undefined, options?: UseFhirSearchOptions<TResourceType> | null | undefined): UseQueryResult<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>>;

interface UseFhirSearchAllPagesOptions<TResourceType extends AnyResourceTypeOrCustomResource> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    query?: Omit<UseQueryOptions<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>, unknown, BundleNavigator<Retrieved<ResourceOf<TResourceType>>>, ReturnType<(typeof FhirQueryKeys)["search"]>>, "initialData" | "queryKey" | "queryFn" | "keepPreviousData"> | null | undefined;
}
/**
 * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a search request.
 *
 * @param parameters - the initial search parameters can either be a function that manipulates a `resourceSearch` for the
 * primary resource type or a search parameters string
 *
 * @see https://hl7.org/fhir/http.html#search
 */
declare function useFhirSearchAllPages<TResourceType extends AnyResourceTypeOrCustomResource>(type: TResourceType, parameters: FhirClientSearchParameters<ResourceTypeOf<TResourceType>>, options?: UseFhirSearchAllPagesOptions<TResourceType> | null | undefined): UseQueryResult<BundleNavigator<ResourceOf<TResourceType>>>;

interface UseFhirSearchOneOptions<TResourceType extends AnyResourceTypeOrCustomResource> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    fhir?: Omit<Parameters<FhirClient["searchOne"]>[2], "signal"> | null | undefined;
    query?: Omit<UseQueryOptions<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>, unknown, BundleNavigator<Retrieved<ResourceOf<TResourceType>>>, ReturnType<(typeof FhirQueryKeys)["search"]>>, "initialData" | "queryKey" | "queryFn" | "keepPreviousData"> | null | undefined;
}
/**
 * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a search request.
 *
 * @param parameters - the initial search parameters can either be a function that manipulates a `resourceSearch` for the
 * primary resource type or a search parameters string
 *
 * @see https://hl7.org/fhir/http.html#search
 */
declare function useFhirSearchOne<TResourceType extends AnyResourceTypeOrCustomResource>(type: TResourceType, parameters?: FhirClientSearchParameters<ResourceTypeOf<TResourceType>> | null | undefined, options?: UseFhirSearchOneOptions<TResourceType> | null | undefined): UseQueryResult<WithResolvableReferences<Retrieved<ResourceOf<TResourceType>>>>;

type UseFhirTransactionMutationArgs = (executor: BundleExecutor) => unknown;
interface UseFhirTransactionMutationOptions {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    mutation?: Omit<UseMutationOptions<BundleExecutor, unknown, UseFhirTransactionMutationArgs, unknown>, "mutationFn"> | null | undefined;
}
/**
 * The transaction interaction submits a set of actions to perform on a server in a single HTTP request/response.
 * All entries execute in a single transaction on the server.
 *
 * @see https://hl7.org/fhir/http.html#transaction
 */
declare function useFhirTransactionMutation(options?: UseFhirTransactionMutationOptions | null | undefined): UseMutationResult<BundleExecutor, unknown, UseFhirTransactionMutationArgs, unknown>;

type UseFhirUpdateMutationArgs<TResourceType extends AnyResourceType> = {
    body: ExtractResource<TResourceType>;
    options?: (GeneralParameters & ConcurrencyParameters & ConditionalSearchParameters<TResourceType>) | null | undefined;
} | ExtractResource<TResourceType>;
interface UseFhirUpdateMutationOptions<TResourceType extends AnyResourceType> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    mutation?: Omit<UseMutationOptions<Retrieved<ExtractResource<TResourceType>>, unknown, UseFhirUpdateMutationArgs<TResourceType>, unknown>, "mutationFn"> | null | undefined;
}
/**
 * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for an update request.
 *
 * @see https://hl7.org/fhir/http.html#update
 */
declare function useFhirUpdateMutation<TResourceType extends AnyResourceType>(type: TResourceType, options?: UseFhirUpdateMutationOptions<TResourceType> | null | undefined): UseMutationResult<Retrieved<ExtractResource<TResourceType>>, unknown, UseFhirUpdateMutationArgs<TResourceType>, unknown>;

interface UseFhirVReadOptions<TResourceType extends AnyResourceTypeOrCustomResource> {
    /** The FhirClient key to use to perform the query. */
    fhirClient?: string | null | undefined;
    fhir?: Omit<Parameters<FhirClient["vread"]>[3], "signal"> | null | undefined;
    query?: Omit<UseQueryOptions<Retrieved<ResourceOf<TResourceType>>, unknown, Retrieved<ResourceOf<TResourceType>>, ReturnType<(typeof FhirQueryKeys)["vread"]>>, "initialData" | "queryKey" | "queryFn"> | null | undefined;
}
/**
 * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a vread request.
 *
 * @see https://hl7.org/fhir/http.html#vread
 */
declare function useFhirVRead<TResourceType extends AnyResourceTypeOrCustomResource>(type: TResourceType, id: string | Reference | null | undefined, vid: string | null | undefined, options?: UseFhirVReadOptions<TResourceType> | null | undefined): UseQueryResult<Retrieved<ResourceOf<TResourceType>>>;

type FhirQueryProviderProps = PropsWithChildren<{
    /**
     * The {@link FhirRestfulClient} to make FHIR HTTP requests.
     */
    fhirClient: FhirClient | string | Record<string, FhirClient | string>;
    /**
     * Set to `false` to disable default cache invalidation / optimization strategies implemented in default hooks.
     */
    manageCache?: boolean | null | undefined;
} & ({
    /**
     * An existing {@link QueryClient} instance to use. If none is provided, a default instance is created
     * and managed automatically.
     */
    queryClient?: QueryClient | null | undefined;
} | {
    /**
     * Any custom {@link QueryClientConfig} configuration options to use.
     */
    queryClientConfig?: QueryClientConfig | null | undefined;
})>;
/**
 * Provide a context for fhir-query hooks.
 * Should probably be placed near the top of your React app render tree.
 */
declare function FhirQueryProvider(props: FhirQueryProviderProps): react_jsx_runtime.JSX.Element;

export { DEFAULT_FHIR_CLIENT, FhirQueryContext, FhirQueryKeys, FhirQueryProvider, type FhirQueryProviderProps, type UseFhirBatchMutationArgs, type UseFhirBatchMutationOptions, type UseFhirCapabilitiesOptions, type UseFhirClientMutationArgs, type UseFhirClientMutationOptions, type UseFhirClientOptions, type UseFhirCreateMutationArgs, type UseFhirCreateMutationOptions, type UseFhirCreateOrMutationArgs, type UseFhirCreateOrMutationOptions, type UseFhirDeleteMutationArgs, type UseFhirDeleteMutationOptions, type UseFhirExecuteMutationOptions, type UseFhirExecuteOptions, type UseFhirGraphOptions, type UseFhirGraphQLMutationOptions, type UseFhirGraphQLOptions, type UseFhirGraphQLResultOptions, type UseFhirHistoryOptions, type UseFhirInfiniteSearchOptions, type UseFhirPatchMutationArgs, type UseFhirPatchMutationOptions, type UseFhirReadOptions, type UseFhirSaveMutationArgs, type UseFhirSaveMutationOptions, type UseFhirSearchAllPagesOptions, type UseFhirSearchOneOptions, type UseFhirSearchOptions, type UseFhirTransactionMutationArgs, type UseFhirTransactionMutationOptions, type UseFhirUpdateMutationArgs, type UseFhirUpdateMutationOptions, type UseFhirVReadOptions, useFhirBatchMutation, useFhirCapabilities, useFhirClient, useFhirClientMutation, useFhirClientQueryContext, useFhirCreateMutation, useFhirCreateOrMutation, useFhirDeleteMutation, useFhirExecute, useFhirExecuteMutation, useFhirGraph, useFhirGraphQL, useFhirGraphQLMutation, useFhirGraphQLResult, useFhirHistory, useFhirInfiniteSearch, useFhirPatchMutation, useFhirQueryContext, useFhirRead, useFhirSaveMutation, useFhirSearch, useFhirSearchAllPages, useFhirSearchOne, useFhirTransactionMutation, useFhirUpdateMutation, useFhirVRead };
