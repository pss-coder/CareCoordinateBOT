{"version":3,"file":"index.mjs","sources":["../../../src/r5/cache-keys.ts","../../../src/r5/context.tsx","../../../src/r5/hooks/use-fhir-batch-mutation.tsx","../../../src/r5/hooks/use-fhir-capabilities.tsx","../../../src/r5/hooks/use-fhir-client.tsx","../../../src/r5/hooks/use-fhir-client-mutation.tsx","../../../src/r5/hooks/use-fhir-create-mutation.tsx","../../../src/r5/hooks/use-fhir-create-or-mutation.tsx","../../../src/r5/hooks/use-fhir-delete-mutation.tsx","../../../src/r5/hooks/use-fhir-execute.tsx","../../../src/r5/hooks/use-fhir-execute-mutation.tsx","../../../src/r5/hooks/use-fhir-graph.tsx","../../../src/r5/hooks/use-fhir-graphql.tsx","../../../src/r5/hooks/use-fhir-graphql-mutation.tsx","../../../src/r5/hooks/use-fhir-graphql-result.tsx","../../../src/r5/hooks/use-fhir-history.tsx","../../../src/r5/hooks/use-fhir-infinite-search.tsx","../../../src/r5/hooks/use-fhir-patch-mutation.tsx","../../../src/r5/hooks/use-fhir-read.tsx","../../../src/r5/hooks/use-fhir-save-mutation.tsx","../../../src/r5/hooks/use-fhir-search.tsx","../../../src/r5/hooks/use-fhir-search-all-pages.tsx","../../../src/r5/hooks/use-fhir-search-one.tsx","../../../src/r5/hooks/use-fhir-transaction-mutation.tsx","../../../src/r5/hooks/use-fhir-update-mutation.tsx","../../../src/r5/hooks/use-fhir-vread.tsx","../../../src/r5/provider.tsx"],"sourcesContent":["import {\n  AnyResourceType,\n  AnyResourceTypeOrCustomResource,\n  FhirClient,\n  GeneralParameters,\n  Operation,\n  resourceTypeOf,\n} from \"@bonfhir/core/r5\";\nimport { QueryClient } from \"@tanstack/react-query\";\n\n/**\n * Manages [Query keys](https://tanstack.com/query/latest/docs/react/guides/query-keys) and\n * cache optimizations / invalidations.\n */\nexport const FhirQueryKeys = {\n  /**\n   * Get the query keys for a read request\n   */\n  read: (\n    clientKey: string,\n    type: AnyResourceTypeOrCustomResource,\n    id: string,\n    options?: GeneralParameters | null | undefined,\n  ) => [clientKey, resourceTypeOf(type), id, \"read\", type, options] as const,\n\n  /**\n   * Get the query keys for a vread request\n   */\n  vread: (\n    clientKey: string,\n    type: AnyResourceTypeOrCustomResource,\n    id: string,\n    vid: string,\n    options?: Parameters<FhirClient[\"vread\"]>[3] | null | undefined,\n  ) =>\n    [clientKey, resourceTypeOf(type), id, \"vread\", vid, type, options] as const,\n\n  /**\n   * Get the query keys for a history request\n   */\n  history: (\n    clientKey: string,\n    type: AnyResourceTypeOrCustomResource | null | undefined,\n    id: string | null | undefined,\n    pageUrl?: string | null | undefined,\n    options?: Parameters<FhirClient[\"history\"]>[2] | null | undefined,\n  ) => {\n    if (!type && !id) {\n      return [clientKey, \"history\", options] as const;\n    }\n    if (!id) {\n      return [\n        clientKey,\n        resourceTypeOf(type),\n        \"history\",\n        type,\n        pageUrl,\n        options,\n      ] as const;\n    }\n    return [\n      clientKey,\n      resourceTypeOf(type),\n      id,\n      \"history\",\n      type,\n      pageUrl,\n      options,\n    ] as const;\n  },\n\n  /**\n   * Get the query keys for a search request\n   */\n  search: (\n    clientKey: string,\n    type: AnyResourceTypeOrCustomResource,\n    parameters?: string | null | undefined,\n    pageUrl?: string | null | undefined,\n    options?: Parameters<FhirClient[\"search\"]>[2] | null | undefined,\n  ) =>\n    [\n      clientKey,\n      resourceTypeOf(type),\n      \"search\",\n      type,\n      parameters,\n      pageUrl,\n      options,\n    ] as const,\n\n  /**\n   * Get the query keys for a infinite search request\n   */\n  infiniteSearch: (\n    clientKey: string,\n    type: AnyResourceTypeOrCustomResource,\n    parameters?: string | null | undefined,\n    options?: Parameters<FhirClient[\"search\"]>[2] | null | undefined,\n  ) =>\n    [\n      clientKey,\n      resourceTypeOf(type),\n      \"infiniteSearch\",\n      type,\n      parameters,\n      options,\n    ] as const,\n\n  /**\n   * Get the query keys for a capabilities request\n   */\n  capabilities: (clientKey: string, mode: string | null | undefined) =>\n    [clientKey, \"capabilities\", mode] as const,\n\n  /**\n   * Get the query keys for an execute request\n   */\n  execute: (\n    clientKey: string,\n    operation: Operation | Record<string, unknown>,\n  ) =>\n    [\n      clientKey,\n      operation.resourceType,\n      operation.resourceId,\n      \"execute\",\n      operation.operation,\n      operation.parameters,\n    ] as const,\n\n  clientFn: (clientKey: string, fn: string, params: unknown[]) =>\n    [clientKey, \"client\", fn, ...params] as const,\n\n  /**\n   * Invalidate all queries that might be impacted by a change on a resource.\n   */\n  invalidateQueries: (\n    clientKey: string,\n    queryClient: QueryClient,\n    type: AnyResourceType | undefined,\n    id: string | undefined,\n  ) => {\n    if (!type && !id) {\n      queryClient.invalidateQueries({ queryKey: [clientKey] });\n      return;\n    }\n\n    queryClient.invalidateQueries({ queryKey: [clientKey, type, id] });\n    queryClient.invalidateQueries({ queryKey: [clientKey, type, \"search\"] });\n    queryClient.invalidateQueries({\n      queryKey: [clientKey, type, \"infiniteSearch\"],\n    });\n    queryClient.invalidateQueries({ queryKey: [clientKey, \"history\"] });\n    queryClient.invalidateQueries({ queryKey: [clientKey, type, \"history\"] });\n    queryClient.invalidateQueries({\n      queryKey: [clientKey, type, id, \"history\"],\n    });\n    queryClient.invalidateQueries({\n      queryKey: [clientKey, type, id, \"execute\"],\n    });\n    queryClient.invalidateQueries({\n      queryKey: [clientKey, type, undefined, \"execute\"],\n    });\n    queryClient.invalidateQueries({ queryKey: [clientKey, \"client\"] });\n  },\n};\n","import { FhirClient } from \"@bonfhir/core/r5\";\nimport { QueryClient } from \"@tanstack/react-query\";\nimport { createContext, useContext } from \"react\";\n\n/**\n * The name for the default {@link FhirClient}.\n */\nexport const DEFAULT_FHIR_CLIENT = \"default\";\n\nexport interface FhirQueryContext {\n  /**\n   * The {@link FhirClient} to make FHIR HTTP requests.\n   */\n  fhirClient: Record<string | typeof DEFAULT_FHIR_CLIENT, FhirClient>;\n\n  /**\n   * The {@link QueryClient} used to manage the state.\n   */\n  queryClient: QueryClient;\n\n  /**\n   * `true` when the cache invalidation / optimizations are managed by the default hooks.\n   */\n  manageCache: boolean;\n}\n\n/**\n * The context used by fhir-query.\n */\nexport const FhirQueryContext = createContext<FhirQueryContext | undefined>(\n  undefined,\n);\n\n/**\n * Get the current {@link FhirQueryContext}.\n *\n * @throws Error if no parent context exists (a.k.a. no `FhirQueryProvider` was used in the parent tree).\n */\nexport function useFhirQueryContext(): FhirQueryContext {\n  const context = useContext(FhirQueryContext);\n  if (!context) {\n    throw new Error(\n      \"Missing FhirQueryContext. Did you forget to use a parent FhirQueryProvider?\",\n    );\n  }\n\n  return context;\n}\n\n/**\n * Get the current {@link FhirQueryContext} with a specific fhirClient.\n *\n * @throws Error if no parent context exists (a.k.a. no `FhirQueryProvider` was used in the parent tree).\n */\nexport function useFhirClientQueryContext(\n  client: string | null | undefined,\n): Omit<FhirQueryContext, \"fhirClient\"> & {\n  fhirClient: FhirClient;\n  clientKey: string;\n} {\n  const context = useFhirQueryContext();\n  const clientKey = client ?? DEFAULT_FHIR_CLIENT;\n\n  const fhirClient = context.fhirClient[clientKey];\n  if (!fhirClient) {\n    throw new Error(\n      `Unable to find a FhirClient with name ${clientKey}. Did you forget to configure it in a parent FhirQueryProvider?`,\n    );\n  }\n\n  return {\n    ...context,\n    fhirClient,\n    clientKey,\n  };\n}\n","import { BundleExecutor, Resource, Retrieved } from \"@bonfhir/core/r5\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport type UseFhirBatchMutationArgs = (executor: BundleExecutor) => unknown;\n\nexport interface UseFhirBatchMutationOptions {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          BundleExecutor,\n          unknown,\n          UseFhirBatchMutationArgs,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * The batch interaction submits a set of actions to perform on a server in a single HTTP request/response.\n * Each entry executes in a different transaction on the server.\n *\n * @see https://hl7.org/fhir/http.html#transaction\n */\nexport function useFhirBatchMutation(\n  options?: UseFhirBatchMutationOptions | null | undefined,\n): UseMutationResult<\n  BundleExecutor,\n  unknown,\n  UseFhirBatchMutationArgs,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      for (const resource of data.futureRequests.map((x) => x.resource)) {\n        if (\n          (resource as Resource).resourceType &&\n          (resource as Retrieved<Resource>).id\n        ) {\n          FhirQueryKeys.invalidateQueries(\n            fhirQueryContext.clientKey,\n            fhirQueryContext.queryClient,\n            (resource as Resource).resourceType,\n            (resource as Retrieved<Resource>).id,\n          );\n        }\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: async (args) => {\n      const executor = fhirQueryContext.fhirClient.batch();\n      args(executor);\n      await executor.send();\n      // We touch all resources to ensure there are no errors at this stage\n      for (const x of executor.futureRequests) x.resource;\n      return executor;\n    },\n  });\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { CapabilityStatement, TerminologyCapabilities } from \"@bonfhir/core/r5\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirCapabilitiesOptions<\n  TResourceType extends CapabilityStatement | TerminologyCapabilities,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          TResourceType,\n          unknown,\n          TResourceType,\n          ReturnType<(typeof FhirQueryKeys)[\"capabilities\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * The capabilities interaction retrieves the information about a server's capabilities - which portions of this specification it supports.\n *\n * https://hl7.org/fhir/http.html#capabilities\n */\nexport function useFhirCapabilities(\n  mode?: \"full\" | \"normative\" | null | undefined,\n  options?: UseFhirCapabilitiesOptions<CapabilityStatement> | null | undefined,\n): UseQueryResult<CapabilityStatement>;\nexport function useFhirCapabilities(\n  mode: \"terminology\",\n  options?:\n    | UseFhirCapabilitiesOptions<TerminologyCapabilities>\n    | null\n    | undefined,\n): UseQueryResult<TerminologyCapabilities>;\nexport function useFhirCapabilities(\n  mode?: \"full\" | \"normative\" | \"terminology\" | null | undefined,\n  options?: UseFhirCapabilitiesOptions<any> | null | undefined,\n): UseQueryResult<CapabilityStatement | TerminologyCapabilities> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useQuery({\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.capabilities(fhirQueryContext.clientKey, mode),\n    queryFn: () => fhirQueryContext.fhirClient.capabilities(mode as any),\n  });\n}\n","import { FhirClient } from \"@bonfhir/core/r5\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirClientOptions<TResult> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          TResult,\n          unknown,\n          TResult,\n          ReturnType<(typeof FhirQueryKeys)[\"clientFn\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) using a FhirClient directly.\n */\nexport function useFhirClient<TResult>(\n  fn: (client: FhirClient) => Promise<TResult>,\n  params?: unknown[],\n  options?: UseFhirClientOptions<TResult> | null | undefined,\n): UseQueryResult<TResult> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useQuery<TResult>({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.clientFn(\n      fhirQueryContext.clientKey,\n      fn.toString(),\n      params || [],\n    ),\n    queryFn: async () => await fn(fhirQueryContext.fhirClient),\n  });\n}\n","import { FhirClient } from \"@bonfhir/core/r5\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport type UseFhirClientMutationArgs<TResult> = (\n  client: FhirClient,\n) => Promise<TResult>;\n\nexport interface UseFhirClientMutationOptions<TResult> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          TResult,\n          unknown,\n          UseFhirClientMutationArgs<TResult>,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n  /**\n   * Whether to invalidate all queries that use the same FhirClient.\n   * IF true, you should probably think about doing manual invalidation in the `onSuccess` callback.\n   */\n  doNotInvalidateAllQueries?: boolean;\n}\n\n/**\n * This hook allows you to perform one or several operations using a FhirClient directly.\n *\n * Invoking it will invalidate all queries that use the same FhirClient if `manageCache` is true (the default).\n */\nexport function useFhirClientMutation<TResult = unknown>(\n  options?: UseFhirClientMutationOptions<TResult> | null | undefined,\n): UseMutationResult<\n  TResult,\n  unknown,\n  UseFhirClientMutationArgs<TResult>,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (fhirQueryContext.manageCache && !options?.doNotInvalidateAllQueries) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          undefined,\n          undefined,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: async (args) => {\n      return await args(fhirQueryContext.fhirClient);\n    },\n  });\n}\n","import {\n  AnyResourceType,\n  ConditionalSearchParameters,\n  ExtractResource,\n  GeneralParameters,\n  Retrieved,\n  isResource,\n} from \"@bonfhir/core/r5\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport type UseFhirCreateMutationArgs<TResourceType extends AnyResourceType> =\n  | {\n      body: ExtractResource<TResourceType>;\n      options?:\n        | (GeneralParameters & ConditionalSearchParameters<TResourceType>)\n        | null\n        | undefined;\n    }\n  | ExtractResource<TResourceType>;\n\nexport interface UseFhirCreateMutationOptions<\n  TResourceType extends AnyResourceType,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          Retrieved<ExtractResource<TResourceType>>,\n          unknown,\n          UseFhirCreateMutationArgs<TResourceType>,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for a create request.\n *\n * @see https://hl7.org/fhir/http.html#create\n */\nexport function useFhirCreateMutation<TResourceType extends AnyResourceType>(\n  type: TResourceType,\n  options?: UseFhirCreateMutationOptions<TResourceType> | null | undefined,\n): UseMutationResult<\n  Retrieved<ExtractResource<TResourceType>>,\n  unknown,\n  UseFhirCreateMutationArgs<TResourceType>,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (fhirQueryContext.manageCache) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          data.resourceType,\n          data.id,\n        );\n        fhirQueryContext.queryClient.setQueryData(\n          FhirQueryKeys.read(\n            fhirQueryContext.clientKey,\n            data.resourceType,\n            data.id,\n          ),\n          data,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: (args) =>\n      isResource(type, args)\n        ? fhirQueryContext.fhirClient.create(args)\n        : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fhirQueryContext.fhirClient.create(args.body, args.options as any),\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  CreateOrAction,\n  FhirClientSearchParameters,\n  MergeResult,\n  ResourceOf,\n  Retrieved,\n} from \"@bonfhir/core/r5\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport type UseFhirCreateOrMutationArgs<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> = {\n  action: CreateOrAction;\n  body: ResourceOf<TResourceType>;\n  search?:\n    | FhirClientSearchParameters<ResourceOf<TResourceType>[\"resourceType\"]>\n    | null\n    | undefined;\n};\n\nexport interface UseFhirCreateOrMutationOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          MergeResult<Retrieved<ResourceOf<TResourceType>>>,\n          unknown,\n          UseFhirCreateOrMutationArgs<TResourceType>,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\nexport function useFhirCreateOrMutation<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  _type: TResourceType,\n  options?: UseFhirCreateOrMutationOptions<TResourceType> | null | undefined,\n): UseMutationResult<\n  MergeResult<Retrieved<ResourceOf<TResourceType>>>,\n  unknown,\n  UseFhirCreateOrMutationArgs<TResourceType>,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: ([resource, isChanged], variables, context) => {\n      if (isChanged && fhirQueryContext.manageCache) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          resource.resourceType,\n          resource.id,\n        );\n        fhirQueryContext.queryClient.setQueryData(\n          FhirQueryKeys.read(\n            fhirQueryContext.clientKey,\n            resource.resourceType,\n            resource.id,\n          ),\n          resource,\n        );\n      }\n      options?.mutation?.onSuccess?.([resource, isChanged], variables, context);\n    },\n    mutationFn: (args) =>\n      fhirQueryContext.fhirClient.createOr(\n        args.action,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        args.body as any,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        args.search as any,\n      ),\n  });\n}\n","import { AnyResourceType, GeneralParameters } from \"@bonfhir/core/r5\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirDeleteMutationArgs {\n  resourceType: AnyResourceType;\n  id: string;\n  options?: GeneralParameters | null | undefined;\n}\n\nexport interface UseFhirDeleteMutationOptions {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<void, unknown, UseFhirDeleteMutationArgs, unknown>,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for a delete request.\n *\n * @see https://hl7.org/fhir/http.html#delete\n */\nexport function useFhirDeleteMutation(\n  options?: UseFhirDeleteMutationOptions | null | undefined,\n): UseMutationResult<void, unknown, UseFhirDeleteMutationArgs, unknown> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (fhirQueryContext.manageCache) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          variables.resourceType,\n          variables.id,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: (args) => {\n      return fhirQueryContext.fhirClient.delete(\n        args.resourceType,\n        args.id,\n        args.options,\n      );\n    },\n  });\n}\n","import { Operation } from \"@bonfhir/core/r5\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirExecuteOptions<TOperationResult> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          TOperationResult,\n          unknown,\n          TOperationResult,\n          ReturnType<(typeof FhirQueryKeys)[\"execute\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for an operation request.\n * If  you want to execute an operation that affects state, you should use the {@link useFhirExecuteMutation} hook instead.\n *\n * @see https://hl7.org/fhir/operations.html\n * @see https://www.hl7.org/fhir/operationslist.html\n */\nexport function useFhirExecute<TOperationResult>(\n  operation: Operation,\n  options?: UseFhirExecuteOptions<Operation> | null | undefined,\n): UseQueryResult<TOperationResult> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  if (operation.affectsState ?? true) {\n    throw new Error(\n      `useFhirExecute hook does not support operations that affect state (${operation.operation}). Use useFhirExecuteMutation instead.`,\n    );\n  }\n\n  return useQuery({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.execute(fhirQueryContext.clientKey, operation),\n    queryFn: () => fhirQueryContext.fhirClient.execute(operation),\n  });\n}\n","import { AnyResourceType, Operation } from \"@bonfhir/core/r5\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirExecuteMutationOptions<TOperationResult> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<TOperationResult, unknown, Operation, unknown>,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for an operation request.\n *\n * This version is to be used when the operation affects state, or you want to avoid query caching.\n * If that's not the case, consider using the {@link useFhirExecute} hook instead.\n *\n * @see https://hl7.org/fhir/operations.html\n * @see https://www.hl7.org/fhir/operationslist.html\n */\nexport function useFhirExecuteMutation<TOperationResult>(\n  options?: UseFhirExecuteMutationOptions<TOperationResult> | null | undefined,\n): UseMutationResult<TOperationResult, unknown, Operation, unknown> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, operation, context) => {\n      if (\n        fhirQueryContext.manageCache &&\n        operation.resourceType &&\n        operation.resourceId\n      ) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          operation.resourceType as AnyResourceType,\n          operation.resourceId,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, operation, context);\n    },\n    mutationFn: (args) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      fhirQueryContext.fhirClient.execute(args as any),\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  BundleNavigator,\n  ResourceOf,\n  Retrieved,\n  resourceTypeOf,\n} from \"@bonfhir/core/r5\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirGraphOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          unknown,\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          ReturnType<(typeof FhirQueryKeys)[\"execute\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Execute a [$graph operation](http://hl7.org/fhir/R4B/resource-operation-graph.html) to retrieve an entire graph\n * of resources.\n *\n * @see http://hl7.org/fhir/R4B/resource-operation-graph.html\n */\nexport function useFhirGraph<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  graph: string,\n  resourceType?: TResourceType | null | undefined,\n  resourceId?: string | null | undefined,\n  options?: UseFhirGraphOptions<TResourceType> | null | undefined,\n): UseQueryResult<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useQuery({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.execute(fhirQueryContext.clientKey, {\n      operation: \"$graph\",\n      resourceType: resourceTypeOf(resourceType),\n      resourceId,\n      affectsState: false,\n    }),\n    queryFn: () =>\n      fhirQueryContext.fhirClient.graph(graph, resourceType, resourceId),\n  });\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirGraphQLOptions<TResult = any> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          TResult,\n          unknown,\n          TResult,\n          ReturnType<(typeof FhirQueryKeys)[\"execute\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Execute a [$graphql operation](https://hl7.org/fhir/resource-operation-graphql.html).\n *\n * This hook puts the query on error if there are GraphQL errors in the response.\n * This make it easier to reason about, but do not support partial errors in GraphQL.\n *\n * Use the `useFhirGraphqlResult` hook to have access to the raw GraphQL response,\n * including the `errors` and `extensions` field.\n */\nexport function useFhirGraphQL<TResult = any>(\n  query: string,\n  variables?: Record<string, any>,\n  operationName?: string | null | undefined,\n  options?: UseFhirGraphQLOptions<TResult> | null | undefined,\n): UseQueryResult<TResult>;\nexport function useFhirGraphQL<TResult = any, TVariables = Record<string, any>>(\n  query: TypedDocumentNode<TResult, TVariables>,\n  variables?: TVariables,\n  options?: UseFhirGraphQLOptions<TResult> | null | undefined,\n): UseQueryResult<TResult>;\nexport function useFhirGraphQL<TResult = any, TVariables = Record<string, any>>(\n  query: string | TypedDocumentNode<TResult, TVariables>,\n  variables?: TVariables,\n  operationName?: string | UseFhirGraphQLOptions<TResult> | null | undefined,\n  options?: UseFhirGraphQLOptions<TResult> | null | undefined,\n): UseQueryResult<TResult> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  if (typeof operationName !== \"string\") {\n    options = operationName;\n  }\n\n  return useQuery<TResult>({\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.execute(fhirQueryContext.clientKey, {\n      operation: \"$graphql\",\n      parameters: {\n        query,\n        variables,\n      },\n    }),\n    queryFn: () =>\n      fhirQueryContext.fhirClient.graphql(\n        query as any,\n        variables as any,\n        typeof operationName === \"string\" ? (operationName as any) : undefined,\n      ),\n  });\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirGraphQLMutationOptions<\n  TResult = any,\n  TVariables = Record<string, any>,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<TResult, unknown, TVariables, unknown>,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Execute a [$graphql mutation](https://hl7.org/fhir/resource-operation-graphql.html).\n *\n * The mutation is put on error if there are GraphQL errors in the response.\n */\nexport function useFhirGraphQLMutation<TResult = any>(\n  query: string,\n  operationName?: string | null | undefined,\n  options?: UseFhirGraphQLMutationOptions<TResult> | null | undefined,\n): UseMutationResult<TResult, unknown, Record<string, any>, unknown>;\nexport function useFhirGraphQLMutation<\n  TResult = any,\n  TVariables = Record<string, any>,\n>(\n  query: TypedDocumentNode<TResult, TVariables>,\n  options?: UseFhirGraphQLMutationOptions<TResult> | null | undefined,\n): UseMutationResult<TResult, unknown, TVariables, unknown>;\nexport function useFhirGraphQLMutation<\n  TResult = any,\n  TVariables = Record<string, any>,\n>(\n  query: string | TypedDocumentNode<TResult, TVariables>,\n  operationName?:\n    | string\n    | UseFhirGraphQLMutationOptions<TResult>\n    | null\n    | undefined,\n  options?: UseFhirGraphQLMutationOptions<TResult> | null | undefined,\n): UseMutationResult<TResult, unknown, TVariables, unknown> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  if (typeof operationName !== \"string\") {\n    options = operationName;\n  }\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (fhirQueryContext.manageCache) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          undefined,\n          undefined,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, variables as any, context);\n    },\n    mutationFn: (variables) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      fhirQueryContext.fhirClient.graphql(\n        query as any,\n        variables as any,\n        typeof operationName === \"string\" ? (operationName as any) : undefined,\n      ),\n  });\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { ExecutionResult } from \"graphql\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirGraphQLResultOptions<TResult = any> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          TResult,\n          unknown,\n          TResult,\n          ReturnType<(typeof FhirQueryKeys)[\"execute\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Execute a [$graphql operation](https://hl7.org/fhir/resource-operation-graphql.html).\n *\n * This hook returns the \"raw\" GraphQL ExecutionResult, including the `errors` and `extensions` field in the query data.\n * It does not put the query on error if there are GraphQL errors in the response - it is up\n * to the caller to handle them.\n *\n * Use the `useFhirGraphql` hook to have a simpler API that puts the query on error\n * whenever there are GraphQL errors.\n */\nexport function useFhirGraphQLResult<TResult = any>(\n  query: string,\n  variables?: Record<string, any>,\n  operationName?: string | null | undefined,\n  options?: UseFhirGraphQLResultOptions<TResult> | null | undefined,\n): UseQueryResult<ExecutionResult<TResult>>;\nexport function useFhirGraphQLResult<\n  TResult = any,\n  TVariables = Record<string, any>,\n>(\n  query: TypedDocumentNode<TResult, TVariables>,\n  variables?: TVariables,\n  options?: UseFhirGraphQLResultOptions<TResult> | null | undefined,\n): UseQueryResult<ExecutionResult<TResult>>;\nexport function useFhirGraphQLResult<\n  TResult = any,\n  TVariables = Record<string, any>,\n>(\n  query: string | TypedDocumentNode<TResult, TVariables>,\n  variables?: TVariables,\n  operationName?:\n    | string\n    | UseFhirGraphQLResultOptions<TResult>\n    | null\n    | undefined,\n  options?: UseFhirGraphQLResultOptions<TResult> | null | undefined,\n): UseQueryResult<ExecutionResult<TResult>> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  if (typeof operationName !== \"string\") {\n    options = operationName;\n  }\n\n  return useQuery<ExecutionResult<TResult>>({\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.execute(fhirQueryContext.clientKey, {\n      operation: \"$graphql\",\n      parameters: {\n        query,\n        variables,\n      },\n    }),\n    queryFn: () =>\n      fhirQueryContext.fhirClient.graphqlResult(\n        query as any,\n        variables as any,\n        typeof operationName === \"string\" ? (operationName as any) : undefined,\n      ),\n  });\n}\n","import {\n  AnyResource,\n  AnyResourceType,\n  BundleNavigator,\n  ExtractResource,\n  FhirClient,\n  Retrieved,\n} from \"@bonfhir/core/r5\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirHistoryOptions<TResourceType extends AnyResourceType> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  fhir?: Parameters<FhirClient[\"history\"]>[2] | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          BundleNavigator<Retrieved<ExtractResource<TResourceType>>>,\n          unknown,\n          BundleNavigator<Retrieved<ExtractResource<TResourceType>>>,\n          ReturnType<(typeof FhirQueryKeys)[\"history\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n  pageUrl?: string | null | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a history request.\n *\n * @see https://hl7.org/fhir/http.html#history\n */\nexport function useFhirHistory<TResource extends AnyResource>(\n  resource: Retrieved<TResource>,\n  options?: UseFhirHistoryOptions<TResource[\"resourceType\"]> | null | undefined,\n): UseQueryResult<BundleNavigator<Retrieved<TResource>>>;\nexport function useFhirHistory<TResourceType extends AnyResourceType>(\n  type?: TResourceType | null | undefined,\n  id?: string | null | undefined,\n  options?: UseFhirHistoryOptions<TResourceType> | null | undefined,\n): UseQueryResult<BundleNavigator<Retrieved<ExtractResource<TResourceType>>>>;\nexport function useFhirHistory<TResourceType extends AnyResourceType>(\n  type?: TResourceType | Retrieved<AnyResource> | null | undefined,\n  id?: string | UseFhirHistoryOptions<TResourceType> | null | undefined,\n  options?: UseFhirHistoryOptions<TResourceType> | null | undefined,\n): UseQueryResult<BundleNavigator<Retrieved<ExtractResource<TResourceType>>>> {\n  if (type && typeof type !== \"string\") {\n    return useFhirHistory(\n      type.resourceType,\n      type.id,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      id as any,\n    ) as UseQueryResult<\n      BundleNavigator<Retrieved<ExtractResource<TResourceType>>>\n    >;\n  }\n\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useQuery({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.history(\n      fhirQueryContext.clientKey,\n      type,\n      id as string,\n      options?.pageUrl,\n      options?.fhir,\n    ),\n    queryFn: ({ signal }) =>\n      options?.pageUrl\n        ? fhirQueryContext.fhirClient.fetchPage(\n            options?.pageUrl,\n            { signal },\n            typeof type === \"string\" ? undefined : type || undefined,\n          )\n        : fhirQueryContext.fhirClient.history(type, id as string, {\n            ...options?.fhir,\n            signal,\n          }),\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  BundleNavigator,\n  FhirClient,\n  FhirClientSearchParameters,\n  ResourceOf,\n  ResourceTypeOf,\n  Retrieved,\n  normalizeSearchParameters,\n} from \"@bonfhir/core/r5\";\nimport {\n  InfiniteData,\n  UseInfiniteQueryResult,\n  UseQueryOptions,\n  useInfiniteQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirInfiniteSearchOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  fhir?: Omit<Parameters<FhirClient[\"search\"]>[2], \"signal\"> | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          unknown,\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          ReturnType<(typeof FhirQueryKeys)[\"infiniteSearch\"]>\n        >,\n        | \"initialData\"\n        | \"queryKey\"\n        | \"queryFn\"\n        | \"keepPreviousData\"\n        | \"getNextPageParam\"\n      >\n    | null\n    | undefined;\n}\n\nexport function useFhirInfiniteSearch<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  type: TResourceType,\n  parameters?:\n    | FhirClientSearchParameters<ResourceTypeOf<TResourceType>>\n    | null\n    | undefined,\n  options?: UseFhirInfiniteSearchOptions<TResourceType> | null | undefined,\n): UseInfiniteQueryResult<\n  InfiniteData<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>>\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  const normalizedParameters = normalizeSearchParameters(type, parameters);\n\n  return useInfiniteQuery({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    initialPageParam: \"\",\n    queryKey: FhirQueryKeys.infiniteSearch(\n      fhirQueryContext.clientKey,\n      type,\n      normalizedParameters,\n      options?.fhir,\n    ),\n    queryFn: ({ pageParam, signal }) =>\n      pageParam\n        ? fhirQueryContext.fhirClient.fetchPage(\n            pageParam as string,\n            { signal },\n            typeof type === \"string\" ? undefined : type || undefined,\n          )\n        : fhirQueryContext.fhirClient.search(\n            type as TResourceType,\n            parameters,\n            { ...options?.fhir, signal },\n          ),\n    keepPreviousData: true,\n    getNextPageParam: (lastPage: BundleNavigator) => lastPage.linkUrl(\"next\"),\n  });\n}\n","import {\n  AnyResourceType,\n  ConcurrencyParameters,\n  ConditionalSearchParameters,\n  ExtractResource,\n  FhirClientPatchBody,\n  GeneralParameters,\n  ResourceTypeOf,\n  Retrieved,\n} from \"@bonfhir/core/r5\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirPatchMutationArgs<\n  TResourceType extends AnyResourceType,\n> {\n  id: string;\n  body: FhirClientPatchBody<ResourceTypeOf<TResourceType>>;\n  options?:\n    | (GeneralParameters &\n        ConcurrencyParameters & {\n          versionId?: string | null | undefined;\n        } & ConditionalSearchParameters<TResourceType>)\n    | null\n    | undefined;\n}\n\nexport interface UseFhirPatchMutationOptions<\n  TResourceType extends AnyResourceType,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          Retrieved<ExtractResource<TResourceType>>,\n          unknown,\n          UseFhirPatchMutationArgs<TResourceType>,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n  manageCache?: boolean | undefined;\n}\n\n/**\n * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for a patch request.\n *\n * @see https://hl7.org/fhir/http.html#patch\n */\nexport function useFhirPatchMutation<TResourceType extends AnyResourceType>(\n  type: TResourceType,\n  options?: UseFhirPatchMutationOptions<TResourceType> | null | undefined,\n): UseMutationResult<\n  Retrieved<ExtractResource<TResourceType>>,\n  unknown,\n  UseFhirPatchMutationArgs<TResourceType>,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  const mutatorManageCache =\n    options?.manageCache === undefined || options?.manageCache;\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (mutatorManageCache && fhirQueryContext.manageCache) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          data.resourceType,\n          data.id,\n        );\n        fhirQueryContext.queryClient.setQueryData(\n          FhirQueryKeys.read(\n            fhirQueryContext.clientKey,\n            data.resourceType,\n            data.id,\n          ),\n          data,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: (args) =>\n      fhirQueryContext.fhirClient.patch(\n        type,\n        args.id,\n        args.body,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        args.options as any,\n      ),\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  FhirClient,\n  Reference,\n  ResourceOf,\n  Retrieved,\n  id as resolveId,\n} from \"@bonfhir/core/r5\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirReadOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  fhir?: Omit<Parameters<FhirClient[\"read\"]>[2], \"signal\"> | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          Retrieved<ResourceOf<TResourceType>>,\n          unknown,\n          Retrieved<ResourceOf<TResourceType>>,\n          ReturnType<(typeof FhirQueryKeys)[\"read\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a read request.\n *\n * @see https://hl7.org/fhir/http.html#read\n */\nexport function useFhirRead<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  type: TResourceType,\n  id: string | Reference | null | undefined,\n  options?: UseFhirReadOptions<TResourceType> | null | undefined,\n): UseQueryResult<Retrieved<ResourceOf<TResourceType>>> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useQuery<Retrieved<ResourceOf<TResourceType>>>({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    enabled:\n      Boolean(id) &&\n      (options?.query?.enabled == undefined || options?.query?.enabled),\n    queryKey: FhirQueryKeys.read(\n      fhirQueryContext.clientKey,\n      type,\n      resolveId(id) || \"\",\n      options?.fhir,\n    ),\n    queryFn: ({ signal }) =>\n      fhirQueryContext.fhirClient.read(\n        type as TResourceType,\n        resolveId(id) || \"\",\n        {\n          ...options?.fhir,\n          signal: signal ?? undefined,\n        },\n      ),\n  });\n}\n","import {\n  AnyResourceType,\n  ConcurrencyParameters,\n  ConditionalSearchParameters,\n  ExtractResource,\n  GeneralParameters,\n  Retrieved,\n  isResource,\n} from \"@bonfhir/core/r5\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport type UseFhirSaveMutationArgs<TResourceType extends AnyResourceType> =\n  | {\n      body: ExtractResource<TResourceType>;\n      options?:\n        | (GeneralParameters &\n            ConcurrencyParameters &\n            ConditionalSearchParameters<TResourceType>)\n        | null\n        | undefined;\n    }\n  | ExtractResource<TResourceType>;\n\nexport interface UseFhirSaveMutationOptions<\n  TResourceType extends AnyResourceType,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          Retrieved<ExtractResource<TResourceType>>,\n          unknown,\n          UseFhirSaveMutationArgs<TResourceType>,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for a create or update request.\n *\n * @see https://hl7.org/fhir/http.html#create\n * @see https://hl7.org/fhir/http.html#update\n */\nexport function useFhirSaveMutation<TResourceType extends AnyResourceType>(\n  type: TResourceType,\n  options?: UseFhirSaveMutationOptions<TResourceType> | null | undefined,\n): UseMutationResult<\n  Retrieved<ExtractResource<TResourceType>>,\n  unknown,\n  UseFhirSaveMutationArgs<TResourceType>,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (fhirQueryContext.manageCache) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          data.resourceType,\n          data.id,\n        );\n        fhirQueryContext.queryClient.setQueryData(\n          FhirQueryKeys.read(\n            fhirQueryContext.clientKey,\n            data.resourceType,\n            data.id,\n          ),\n          data,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: (args) =>\n      isResource(type, args)\n        ? fhirQueryContext.fhirClient.save(args)\n        : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fhirQueryContext.fhirClient.save(args.body, args.options as any),\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  BundleNavigator,\n  FhirClient,\n  FhirClientSearchParameters,\n  ResourceOf,\n  ResourceTypeOf,\n  Retrieved,\n  normalizeSearchParameters,\n} from \"@bonfhir/core/r5\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirSearchOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  fhir?: Omit<Parameters<FhirClient[\"search\"]>[2], \"signal\"> | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          unknown,\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          ReturnType<(typeof FhirQueryKeys)[\"search\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\" | \"keepPreviousData\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a search request.\n *\n * @param parameters - the initial search parameters can either be a function that manipulates a `resourceSearch` for the\n * primary resource type or a search parameters string\n *\n * @param pageUrl - a page url extracted from previous bundle to navigate to a subsequent page.\n *\n * @see https://hl7.org/fhir/http.html#search\n *\n * @example\n *  const [pageUrl, setPageUrl] = useState(\"\");\n *  const patientQuery = useFhirSearch(\"Patient\", (search) => search.name(\"John Doe\")._sort(\"-organization\"), pageUrl);\n *\n *  // To paginate\n *  setPageUrl(patientQuery.data?.linkUrl(\"next\"));\n */\nexport function useFhirSearch<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  type: TResourceType,\n  parameters?:\n    | FhirClientSearchParameters<ResourceTypeOf<TResourceType>>\n    | null\n    | undefined,\n  pageUrl?: string | null | undefined,\n  options?: UseFhirSearchOptions<TResourceType> | null | undefined,\n): UseQueryResult<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  const normalizedParameters = normalizeSearchParameters(type, parameters);\n\n  return useQuery<BundleNavigator<Retrieved<ResourceOf<TResourceType>>>>({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.search(\n      fhirQueryContext.clientKey,\n      type,\n      normalizedParameters,\n      pageUrl,\n      options?.fhir,\n    ),\n    queryFn: ({ signal }) =>\n      pageUrl\n        ? fhirQueryContext.fhirClient.fetchPage(\n            pageUrl,\n            { signal },\n            typeof type === \"string\" ? undefined : type || undefined,\n          )\n        : fhirQueryContext.fhirClient.search(type, parameters, {\n            ...options?.fhir,\n            signal,\n          }),\n    keepPreviousData: true,\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  BundleNavigator,\n  FhirClientSearchParameters,\n  ResourceOf,\n  ResourceTypeOf,\n  Retrieved,\n  normalizeSearchParameters,\n} from \"@bonfhir/core/r5\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirSearchAllPagesOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          unknown,\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          ReturnType<(typeof FhirQueryKeys)[\"search\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\" | \"keepPreviousData\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a search request.\n *\n * @param parameters - the initial search parameters can either be a function that manipulates a `resourceSearch` for the\n * primary resource type or a search parameters string\n *\n * @see https://hl7.org/fhir/http.html#search\n */\nexport function useFhirSearchAllPages<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  type: TResourceType,\n  parameters: FhirClientSearchParameters<ResourceTypeOf<TResourceType>>,\n  options?: UseFhirSearchAllPagesOptions<TResourceType> | null | undefined,\n): UseQueryResult<BundleNavigator<ResourceOf<TResourceType>>> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  const normalizedParameters = normalizeSearchParameters(type, parameters);\n\n  return useQuery<BundleNavigator<ResourceOf<TResourceType>>>({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.search(\n      fhirQueryContext.clientKey,\n      type,\n      normalizedParameters,\n    ),\n    queryFn: ({ signal }) =>\n      fhirQueryContext.fhirClient.searchAllPages(type, parameters, { signal }),\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  BundleNavigator,\n  FhirClient,\n  FhirClientSearchParameters,\n  ResourceOf,\n  ResourceTypeOf,\n  Retrieved,\n  WithResolvableReferences,\n  normalizeSearchParameters,\n} from \"@bonfhir/core/r5\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirSearchOneOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  fhir?:\n    | Omit<Parameters<FhirClient[\"searchOne\"]>[2], \"signal\">\n    | null\n    | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          unknown,\n          BundleNavigator<Retrieved<ResourceOf<TResourceType>>>,\n          ReturnType<(typeof FhirQueryKeys)[\"search\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\" | \"keepPreviousData\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a search request.\n *\n * @param parameters - the initial search parameters can either be a function that manipulates a `resourceSearch` for the\n * primary resource type or a search parameters string\n *\n * @see https://hl7.org/fhir/http.html#search\n */\nexport function useFhirSearchOne<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  type: TResourceType,\n  parameters?:\n    | FhirClientSearchParameters<ResourceTypeOf<TResourceType>>\n    | null\n    | undefined,\n  options?: UseFhirSearchOneOptions<TResourceType> | null | undefined,\n): UseQueryResult<\n  WithResolvableReferences<Retrieved<ResourceOf<TResourceType>>>\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n  const normalizedParameters = normalizeSearchParameters(type, parameters);\n\n  return useQuery<\n    WithResolvableReferences<Retrieved<ResourceOf<TResourceType>>>\n  >({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    queryKey: FhirQueryKeys.search(\n      fhirQueryContext.clientKey,\n      type,\n      normalizedParameters,\n      undefined,\n      options?.fhir,\n    ),\n    queryFn: ({ signal }) =>\n      fhirQueryContext.fhirClient.searchOne(type, parameters, {\n        ...options?.fhir,\n        signal,\n      }),\n  });\n}\n","import { BundleExecutor, Resource, Retrieved } from \"@bonfhir/core/r5\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport type UseFhirTransactionMutationArgs = (\n  executor: BundleExecutor,\n) => unknown;\n\nexport interface UseFhirTransactionMutationOptions {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          BundleExecutor,\n          unknown,\n          UseFhirTransactionMutationArgs,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * The transaction interaction submits a set of actions to perform on a server in a single HTTP request/response.\n * All entries execute in a single transaction on the server.\n *\n * @see https://hl7.org/fhir/http.html#transaction\n */\nexport function useFhirTransactionMutation(\n  options?: UseFhirTransactionMutationOptions | null | undefined,\n): UseMutationResult<\n  BundleExecutor,\n  unknown,\n  UseFhirTransactionMutationArgs,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (fhirQueryContext.manageCache) {\n        for (const resource of data.futureRequests.map((x) => x.resource)) {\n          if (\n            (resource as Resource).resourceType &&\n            (resource as Retrieved<Resource>).id\n          ) {\n            FhirQueryKeys.invalidateQueries(\n              fhirQueryContext.clientKey,\n              fhirQueryContext.queryClient,\n              (resource as Resource).resourceType,\n              (resource as Retrieved<Resource>).id,\n            );\n          }\n        }\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: async (args) => {\n      const executor = fhirQueryContext.fhirClient.transaction();\n      args(executor);\n      await executor.send();\n      // We touch all resources to ensure there are no errors at this stage\n      for (const x of executor.futureRequests) x.resource;\n      return executor;\n    },\n  });\n}\n","import {\n  AnyResourceType,\n  ConcurrencyParameters,\n  ConditionalSearchParameters,\n  ExtractResource,\n  GeneralParameters,\n  Retrieved,\n  isResource,\n} from \"@bonfhir/core/r5\";\nimport {\n  UseMutationOptions,\n  UseMutationResult,\n  useMutation,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport type UseFhirUpdateMutationArgs<TResourceType extends AnyResourceType> =\n  | {\n      body: ExtractResource<TResourceType>;\n      options?:\n        | (GeneralParameters &\n            ConcurrencyParameters &\n            ConditionalSearchParameters<TResourceType>)\n        | null\n        | undefined;\n    }\n  | ExtractResource<TResourceType>;\n\nexport interface UseFhirUpdateMutationOptions<\n  TResourceType extends AnyResourceType,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  mutation?:\n    | Omit<\n        UseMutationOptions<\n          Retrieved<ExtractResource<TResourceType>>,\n          unknown,\n          UseFhirUpdateMutationArgs<TResourceType>,\n          unknown\n        >,\n        \"mutationFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Mutation](https://tanstack.com/query/latest/docs/react/guides/mutations) for an update request.\n *\n * @see https://hl7.org/fhir/http.html#update\n */\nexport function useFhirUpdateMutation<TResourceType extends AnyResourceType>(\n  type: TResourceType,\n  options?: UseFhirUpdateMutationOptions<TResourceType> | null | undefined,\n): UseMutationResult<\n  Retrieved<ExtractResource<TResourceType>>,\n  unknown,\n  UseFhirUpdateMutationArgs<TResourceType>,\n  unknown\n> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useMutation({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.mutation as any),\n    onSuccess: (data, variables, context) => {\n      if (fhirQueryContext.manageCache) {\n        FhirQueryKeys.invalidateQueries(\n          fhirQueryContext.clientKey,\n          fhirQueryContext.queryClient,\n          data.resourceType,\n          data.id,\n        );\n        fhirQueryContext.queryClient.setQueryData(\n          FhirQueryKeys.read(\n            fhirQueryContext.clientKey,\n            data.resourceType,\n            data.id,\n          ),\n          data,\n        );\n      }\n      options?.mutation?.onSuccess?.(data, variables, context);\n    },\n    mutationFn: (args) =>\n      isResource(type, args)\n        ? fhirQueryContext.fhirClient.update(args)\n        : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fhirQueryContext.fhirClient.update(args.body, args.options as any),\n  });\n}\n","import {\n  AnyResourceTypeOrCustomResource,\n  FhirClient,\n  Reference,\n  ResourceOf,\n  Retrieved,\n  id as resolveId,\n} from \"@bonfhir/core/r5\";\nimport {\n  UseQueryOptions,\n  UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport { FhirQueryKeys } from \"../cache-keys\";\nimport { useFhirClientQueryContext } from \"../context\";\n\nexport interface UseFhirVReadOptions<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n> {\n  /** The FhirClient key to use to perform the query. */\n  fhirClient?: string | null | undefined;\n  fhir?: Omit<Parameters<FhirClient[\"vread\"]>[3], \"signal\"> | null | undefined;\n  query?:\n    | Omit<\n        UseQueryOptions<\n          Retrieved<ResourceOf<TResourceType>>,\n          unknown,\n          Retrieved<ResourceOf<TResourceType>>,\n          ReturnType<(typeof FhirQueryKeys)[\"vread\"]>\n        >,\n        \"initialData\" | \"queryKey\" | \"queryFn\"\n      >\n    | null\n    | undefined;\n}\n\n/**\n * Return a [Query](https://tanstack.com/query/latest/docs/react/guides/queries) for a vread request.\n *\n * @see https://hl7.org/fhir/http.html#vread\n */\nexport function useFhirVRead<\n  TResourceType extends AnyResourceTypeOrCustomResource,\n>(\n  type: TResourceType,\n  id: string | Reference | null | undefined,\n  vid: string | null | undefined,\n  options?: UseFhirVReadOptions<TResourceType> | null | undefined,\n): UseQueryResult<Retrieved<ResourceOf<TResourceType>>> {\n  const fhirQueryContext = useFhirClientQueryContext(options?.fhirClient);\n\n  return useQuery<Retrieved<ResourceOf<TResourceType>>>({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...(options?.query as any),\n    enabled:\n      Boolean(id) &&\n      Boolean(vid) &&\n      (options?.query?.enabled == undefined || options?.query?.enabled),\n    queryKey: FhirQueryKeys.vread(\n      fhirQueryContext.clientKey,\n      type,\n      resolveId(id) || \"\",\n      vid || \"\",\n      options?.fhir,\n    ),\n    queryFn: ({ signal }) =>\n      fhirQueryContext.fhirClient.vread(type, resolveId(id) || \"\", vid || \"\", {\n        ...options?.fhir,\n        signal,\n      }),\n  });\n}\n","import { FetchFhirClient, FhirClient } from \"@bonfhir/core/r5\";\nimport {\n  QueryClient,\n  QueryClientConfig,\n  QueryClientProvider,\n} from \"@tanstack/react-query\";\nimport { PropsWithChildren, useMemo } from \"react\";\nimport { DEFAULT_FHIR_CLIENT, FhirQueryContext } from \"./context\";\n\nexport type FhirQueryProviderProps = PropsWithChildren<\n  {\n    /**\n     * The {@link FhirRestfulClient} to make FHIR HTTP requests.\n     */\n    fhirClient: FhirClient | string | Record<string, FhirClient | string>;\n\n    /**\n     * Set to `false` to disable default cache invalidation / optimization strategies implemented in default hooks.\n     */\n    manageCache?: boolean | null | undefined;\n  } & (\n    | {\n        /**\n         * An existing {@link QueryClient} instance to use. If none is provided, a default instance is created\n         * and managed automatically.\n         */\n        queryClient?: QueryClient | null | undefined;\n      }\n    | {\n        /**\n         * Any custom {@link QueryClientConfig} configuration options to use.\n         */\n        queryClientConfig?: QueryClientConfig | null | undefined;\n      }\n  )\n>;\n\n/**\n * Provide a context for fhir-query hooks.\n * Should probably be placed near the top of your React app render tree.\n */\nexport function FhirQueryProvider(props: FhirQueryProviderProps) {\n  const fhirClient = normalizeFhirClient(props.fhirClient);\n  const manageCache = props.manageCache == undefined || props.manageCache;\n  if (hasQueryClient(props)) {\n    return (\n      <FhirQueryContext.Provider\n        value={{\n          fhirClient,\n          queryClient: props.queryClient,\n          manageCache,\n        }}\n      >\n        {props.children}\n      </FhirQueryContext.Provider>\n    );\n  }\n\n  const queryClient = useMemo(\n    () =>\n      new QueryClient(\n        hasQueryClientConfig(props) ? props.queryClientConfig : undefined,\n      ),\n    [],\n  );\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <FhirQueryContext.Provider\n        value={{\n          fhirClient,\n          queryClient,\n          manageCache: manageCache,\n        }}\n      >\n        {props.children}\n      </FhirQueryContext.Provider>\n    </QueryClientProvider>\n  );\n}\n\nfunction hasQueryClient(\n  value: FhirQueryProviderProps,\n): value is FhirQueryProviderProps & { queryClient: QueryClient } {\n  return !!(value as { queryClient: QueryClient }).queryClient;\n}\n\nfunction hasQueryClientConfig(\n  value: FhirQueryProviderProps,\n): value is FhirQueryProviderProps & { queryClientConfig: QueryClientConfig } {\n  return !!(value as { queryClientConfig: QueryClientConfig })\n    .queryClientConfig;\n}\n\nfunction normalizeFhirClient(\n  fhirClient: FhirQueryProviderProps[\"fhirClient\"],\n): FhirQueryContext[\"fhirClient\"] {\n  if (isFhirClientMap(fhirClient)) {\n    const result = Object.fromEntries(\n      Object.entries(fhirClient)\n        .map(([key, value]) => [\n          key ?? DEFAULT_FHIR_CLIENT,\n          typeof value === \"string\"\n            ? new FetchFhirClient({ baseUrl: value })\n            : value,\n        ])\n        .map(([key, value]) => [key, value]),\n    );\n\n    if (!result[DEFAULT_FHIR_CLIENT]) {\n      throw new Error(\n        `Missing a default FhirClient. You must provide a default FhirClient in the fhirClient prop using either an empty string or the \"${DEFAULT_FHIR_CLIENT}\" key.`,\n      );\n    }\n    return result;\n  }\n\n  return {\n    [DEFAULT_FHIR_CLIENT]:\n      typeof fhirClient === \"string\"\n        ? new FetchFhirClient({ baseUrl: fhirClient })\n        : fhirClient,\n  };\n}\n\nfunction isFhirClientMap(\n  fhirClient: FhirQueryProviderProps[\"fhirClient\"],\n): fhirClient is Record<string, FhirClient | string> {\n  if (typeof fhirClient === \"string\") {\n    return false;\n  }\n\n  if (fhirClient[\"fetch\"]) {\n    return false;\n  }\n\n  return true;\n}\n"],"names":["resourceTypeOf","isResource","normalizeSearchParameters","id","FetchFhirClient","createContext","useContext","useMemo","useMutation","useQuery","useInfiniteQuery","QueryClient","QueryClientProvider","jsx","FhirQueryKeys","read","clientKey","type","options","vread","vid","history","pageUrl","search","parameters","infiniteSearch","capabilities","mode","execute","operation","resourceType","resourceId","clientFn","fn","params","invalidateQueries","queryClient","queryKey","undefined","DEFAULT_FHIR_CLIENT","FhirQueryContext","useFhirQueryContext","context","Error","useFhirClientQueryContext","client","fhirClient","useFhirBatchMutation","fhirQueryContext","mutation","onSuccess","data","variables","resource","futureRequests","map","x","mutationFn","async","args","executor","batch","send","useFhirCapabilities","query","queryFn","useFhirClient","toString","useFhirClientMutation","manageCache","doNotInvalidateAllQueries","useFhirCreateMutation","setQueryData","create","body","useFhirCreateOrMutation","_type","isChanged","createOr","action","useFhirDeleteMutation","delete","useFhirExecute","affectsState","useFhirExecuteMutation","useFhirGraph","graph","useFhirGraphQL","operationName","graphql","useFhirGraphQLMutation","useFhirGraphQLResult","graphqlResult","useFhirHistory","fhir","signal","fetchPage","useFhirInfiniteSearch","normalizedParameters","initialPageParam","pageParam","keepPreviousData","getNextPageParam","lastPage","linkUrl","useFhirPatchMutation","mutatorManageCache","patch","useFhirRead","enabled","Boolean","resolveId","useFhirSaveMutation","save","useFhirSearch","useFhirSearchAllPages","searchAllPages","useFhirSearchOne","searchOne","useFhirTransactionMutation","transaction","useFhirUpdateMutation","update","useFhirVRead","FhirQueryProvider","props","normalizeFhirClient","hasQueryClient","_jsx","Provider","value","children","hasQueryClientConfig","queryClientConfig","isFhirClientMap","result","Object","fromEntries","entries","key","baseUrl"],"mappings":"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"}